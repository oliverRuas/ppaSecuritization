'use strict'

const {Contract, Context}=require('fabric-contract-api');
//const { Buffer } = require('safe-buffer');


class securitizationContext extends Context {
    constructor() {
        super();
    }

    GetMSPID(){
        return this.clientIdentity.getMSPID();

    }

    GetUserIdentity(value){
        return this.clientIdentity.getAttributeValue(value)
    }

    // SetUserIdentity(userIdentity){
    //     this.userIdentity=userIdentity
    //     // return this.clientIdentity.getAttributeValue('userIdentity')
    // }


    GetRole(){
        return this.clientIdentity.assertAttributeValue('hf.role', 'client')
    }

    // SetMSPID provides a value for MSP ID
    SetMSPID(mspid){
        this.mspid=mspid
    }

    // // GetTransient returns set MSP ID
    // GetTransient(){
    //     return this.stub.getTransient()
    // }

    // // SetTransient provides a value for MSP ID
    // SetTransient(transient){
    //     this.transient=transient
    // }

    // CheckFormat(number,numberCase){
    //     let index;
    //     let count;
    //     // Check if it is a 2decimal-number
    //     switch ((numberCase==='float') ? 0 : ((numberCase==='int') ? 1 : 2)){
    //         // Numero con decimales
    //         case 0:
    //             console.log('Case 0');
    //             count=0;
    //             for(let i=0;i<number.length;i++){
    //                 if (numberString[i]==='.'){
    //                     index=i;
    //                     count=count+1;
    //                 }else if (numberString[i]===','){
    //                     throw new Error('Wrong format. Try using dot instead of comma')
    //                 }
    //             }
    //             if ((number.length-1-index)>2 || count>1){
    //                 throw new Error('Wrong decimals');
    //             }
    //             // Check if it is strictly positive
    //             number=parseFloat(number);
    //             if (number<=0){
    //                 throw new Error('Number must be strictly positive');
    //             }
    //             return true
    //         case 1:
    //             console.log('Case 1');
    //             count=0;
    //             for(let i=0;i<number.length;i++){
    //                 if (numberString[i]==='.'){
    //                     throw new Error('Wrong format. This number is supposed to be integer');
    //                 }else if(numberString[i]===','){
    //                     throw new Error('Wrong format. This number is supposed to be integer');
    //                 }
    //             }
    //             // Check if it is strictly positive
    //             number=parseInt(number);
    //             if (number<=0){
    //                 throw new Error('Number must be strictly positive');
    //             }
    //             return true
    //         case 2:
    //             throw new Error(`Check what format do you want`);
    //         default:
    //             throw new Error('Error');
    //     }
    // }

    GetEventPayload(){
        return this.stub.setEvent(this.eventName,this.eventPayload)
    }


    SetEventPayload(eventPayload){
        this.eventPayload=eventPayload
    }


    SetEventName(eventName){
        this.eventName=eventName
    }
}



class commonSecuritizationContract extends Contract {
    constructor() {
        // Unique namespace when multiple contracts per chaincode file
        super('common.securitization.com');
    }

    /**
     * Define a custom context for securitization
    */
    createContext() {
        return new securitizationContext();
    }

    async beforeTransaction(ctx) {
        let isClient=await ctx.GetRole();
        if (!isClient){
            throw new Error(`You are not allowed to perform this action`);
        }
        let par=await ctx.stub.getFunctionAndParameters();
        let func = par.fcn;
        let params= par.params;
        console.log(func);
        console.log(params);
        for (let i=0;i<params.length;i++){
            if (params[i]===''){
                throw new Error('There is at least one empty parameter');
            }
        }
    }
    // Here auxiliary functions

    // Our token will have 2 decimals, like fiat currencies
    async _checkDecimals(number){
        // In nodejs every atribute is passed as a string
        // First check if it is a number
        // number.stringify()
        // if(typeof number !=='number'){
        //     throw new Error('Wrong notation');
        // }
        // Not necessary, we are working with 2decimal-numbers
        // Integer between -2^53-1 and 2^53-1
        // if (!Number.isSafeInteger(number)){
        //     throw new Error('Wrong number');
        // }
        // Check if it is a 2decimal-number
        const numberString=number.toString();
        let index;
        let count=0;
        for(let i=0;i<numberString.length;i++){
            if (numberString[i]==='.'){
                index=i;
                count=count+1;
            }
            if (numberString[i]===','){
                throw new Error('Wrong format. Try using dot instead of comma')
            }
        }
        console.log(`numero de puntos ${count}`);
        if ((numberString.length-1-index)>2 || count>1){
            throw new Error('Wrong decimals')
        }
        // Check if it is strictly positive
        number=parseFloat(number);
        if (number<=0){
            throw new Error('Number must be strictly positive');
        }

        return true
    }
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //---------------------------------------IMPORTANTE----------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    // Diferenciar 2 casos:
    // En cuanto al dinero si es dinero que va destinado al pago de cupones o de principal
    // En cuanto a bonos si son del mismo tramo o no (esto de momento nada)



    // Funcionan
    // Transfer money
    async _transferMoney(ctx, userID,amount,keyFrom){
        const genericID=await ctx.stub.getTxID();

        const key1=await ctx.stub.createCompositeKey('securitizationCoin',[userID,genericID]);

        for (const key of keyFrom) {
            await ctx.stub.deleteState(key);
        }

        let typeID=':0'
        const utxo={
            ID: key1+typeID,
            GenericID: genericID,
            Owner: userID,
            Issuer: await ctx.clientIdentity.getID(),
            Amount: amount,
            Factor: 100,
            CanBeUsed: true,
            TypeID: typeID
        };

        await ctx.stub.putState(key1,Buffer.from(JSON.stringify(utxo)));
        return utxo
    }

    async PoolMoney(ctx){
        const userID=await ctx.GetUserIdentity('cif');
        let iterator=await ctx.stub.getStateByPartialCompositeKey('securitizationCoin',[userID]);
        let amount;
        let resultKeys=[];
        let counter=0;
        let value;
        for await (const res of iterator) {
            value = JSON.parse(res.value.toString());
            // console.log(`value: ${value.Amount}`)
            amount=value.Amount;
            if (value.CanBeUsed && value.Owner===userID){
                resultKeys.push(value.ID);
                counter=counter+amount;
            }
            if (resultKeys.length===2){
                break
            }
        }
        if (resultKeys.length === 0 || resultKeys.length===1){
            throw new Error('There is nothing left to do');
        }
        let ret=await this._transferMoney(ctx,userID, counter, resultKeys);
        return ret
    }



    // In this scenario, Originator will initiate the securitization lifecycle. This org will propose a PPA to a
    // farmer/irrigator. To achieve that it is important for the originator to know (listen to enrollments) which farmers
    // have been registered as participants of the network, in order to propose a PPA to a particular irrigator, not to a
    // generic farmer


    // If we know the User ID, then we can query the PPA asociated with that ID
    async QueryPPA(ctx,userID){
        // Prior verificatios deactivated in testing (because of test-network)
        // Who can query this data?
        const ppa=await this._mygetStateByPartialCompositeKey(ctx,'PPA',userID);
        if (ppa===true){
            throw new Error('PPA does not exist')
        }
        return ppa;
    }

    async _getAllResults(iterator, isHistory) {
		let allResults = [];
		let res = await iterator.next();
		while (!res.done) {
			if (res.value && res.value.value.toString()) {
				let jsonRes = {};
				console.log(res.value.value.toString('utf8'));
				if (isHistory && isHistory === true) {
					jsonRes.TxId = res.value.tx_id;
					jsonRes.Timestamp = res.value.timestamp;
					try {
						jsonRes.Value = JSON.parse(res.value.value.toString('utf8'));
					} catch (err) {
						console.log(err);
						jsonRes.Value = res.value.value.toString('utf8');
					}
				} else {
					jsonRes.Key = res.value.key;
					try {
						jsonRes.Record = JSON.parse(res.value.value.toString('utf8'));
					} catch (err) {
						console.log(err);
						jsonRes.Record = res.value.value.toString('utf8');
					}
				}
				allResults.push(jsonRes);
			}
			res = await iterator.next();
		}
		iterator.close();
		return allResults;
	}


    async QueryPPAHistory(ctx, userID,ppaID){
        const key=await ctx.stub.createCompositeKey('PPA',[userID,ppaID])
        let resultsIterator = await ctx.stub.getHistoryForKey(key);
		let results = await this._getAllResults(resultsIterator, true);
		return results;
    }


    // Igual esto tiene que ir en un canal donde esté el/los bancos.
    // Esta funcion la tengo que activar para "crear dinero"


    // Minting money
    async Mint(ctx,amount){
        // if (amount==='' || amount==='0'){
        //     throw new Error('Please, choose a valid value for this field')
        // }
        // Checking format
        await this._checkDecimals(amount);

        // Each UTXO will have a unique, free-collision key
        const genericID=await ctx.stub.getTxID();
        const userID= await ctx.GetUserIdentity('cif')

        const key=await ctx.stub.createCompositeKey('securitizationCoin',[userID,genericID]);

        let typeID;
        typeID=':0'
        //mirar si añadiendo ':0' sigue haciendo bien el query
        const securitizationCoin= {
            ID: key+ typeID,
            GenericID: genericID,
            TypeID: typeID,
            Issuer: await ctx.clientIdentity.getID(),
            Owner: userID,
            Amount: parseInt(parseFloat(amount)*100),
            Factor: 100,
            CanBeUsed: true
        };
        await ctx.stub.putState(securitizationCoin.ID,Buffer.from(JSON.stringify(securitizationCoin)));
        return securitizationCoin;
    }

    // This function is expected to return just one value associated with the partialKey of the user Identity Number
    async _mygetStateByPartialCompositeKey(ctx, name, userID){
        const iterator=await ctx.stub.getStateByPartialCompositeKey(name,[userID]);
        let counter=0;
        let results;

        for await (const res of iterator) {
            results=JSON.parse(res.value.toString())
            counter=counter+1;
            }
        if (counter>1){
            throw new Error('Check this...');
        }else if (counter===0){
            return true;
        }
        return results;
    }

    // funciona
    async QueryMyCoins(ctx){
        const userID=await ctx.GetUserIdentity('cif');
        const iterator=await ctx.stub.getStateByPartialCompositeKey('securitizationCoin',[userID]);
        let results = [];
        let valor;
        for await (const res of iterator) {
            valor= JSON.parse(res.value.toString());
            results.push(valor);
        }
        return results;
    }

    // funciona
    async QueryMyBond(ctx){
        const userID=await ctx.GetUserIdentity('cif');
        const iterator=await ctx.stub.getStateByPartialCompositeKey('BondToken',[userID]);
        let results = [];
        let valor;
        for await (const res of iterator) {
            valor= JSON.parse(res.value.toString());
            results.push(valor);
        }
        return results;
    }
}



class ppaContract extends Contract {
    constructor() {
        // Unique namespace when multiple contracts per chaincode file
        super('ppa.securitization.com');
    }
    createContext() {
        return new securitizationContext();
    }
    async beforeTransaction(ctx) {
        let userMSPID=await ctx.GetMSPID();
        if (userMSPID!=='originatorMSP' && userMSPID!=='farmerMSP'){
            throw new Error('You are not allowed to perform this action');
        }
        let isClient=await ctx.GetRole();
        console.log(`isClient: ${isClient}`);
        if (!isClient){
            throw new Error(`You are not allowed to perform this action`);
        }
        await ctx.SetMSPID(userMSPID);
        let par=await ctx.stub.getFunctionAndParameters();
        let func = par.fcn;
        let params= par.params;
        console.log(func);
        console.log(params);
        for (let i=0;i<params.length;i++){
            if (params[i]===''){
                throw new Error('There is at least one empty parameter');
            }
        }
        const mspid=await ctx.mspid;
        switch(func){
            case 'PPAProposal':
                if (mspid!=='originatorMSP'){
                    console.log('es este caso');
                    throw new Error(`You are not allowed to perform this action`);
                }else{
                    return
                }
            case 'AcceptPPA':
                if (mspid!=='farmerMSP'){
                    throw new Error(`You are not allowed to perform this action`);
                }else{
                    return
                }
            case 'MintPPA':
                if (mspid!=='originatorMSP'){
                    throw new Error(`You are not allowed to perform this action`);
                }else{
                    return
                }
            case 'MaintenanceServiceRequest':
                if (mspid!=='farmerMSP'){
                    throw new Error(`You are not allowed to perform this action`);
                }else{
                    return
                }
            case 'EnergyConsumptionPerPPA':
                if (mspid!=='originatorMSP'){
                    throw new Error(`You are not allowed to perform this action`);
                }else{
                    return
                }
            case 'MonthlyBillPayout':
                if (mspid!=='farmerMSP'){
                    throw new Error(`You are not allowed to perform this action`);
                }else{
                    return
                }
            case 'QueryMyPPA':
                if (mspid!=='farmerMSP'){
                    throw new Error(`You are not allowed to perform this action`);
                }else{
                    return
                }
            // case 'WriteCommonRealTimeParameters':

        }
    }

    //afterTransaction will return the event of the transaction
    async afterTransaction(ctx){
    	let event=await ctx.GetEventPayload();
        return event
    }

    /**
     *
     * @param {*} ctx
     * @returns the size of the pool
     */
     async _isPoolCreated(ctx,poolName){
        const iterator=await ctx.stub.getStateByPartialCompositeKey(poolName,[]);
        let results=[];
        for await (const res of iterator) {
            // push key instead of value json
            results.push(res.key);
        }
        if (results.length === 0){
            return false
        }else if (results.length===1){
            return true;
        }else{
            throw new Error(`State not unique`)
        }
    }
    /**
     *
     * @param {*} ctx
     * @param {*} userID is the ID linked to user (DNI, CIF,...) which is inside his/her ecert
     * @returns the number of PPAs with that partial composite key
     */
    // Auxiliary function to query if PPA contract for this userID has already been proposed
    async _isPPAProposed(ctx,ppaID){
        const ppaBytes=await ctx.stub.getState(ppaID);
        if (!ppaBytes || ppaBytes.length === 0){
            return false
        }else{
            return true
        }
    }

    /**
     *
     * @param {*} ctx
     * @param {*} docTypeName
     * @returns the state associated with that partial key
     */
    // This auxiliary function will only work with those states expected to be unique (POOL, REALTIMEPARAMETERS, RATING...)
    async _getPoolStateByPartialCompositeKey(ctx, docTypeName){
        const iterator=await ctx.stub.getStateByPartialCompositeKey(docTypeName,[]);
        let counter=0;
        let results;
        for await (const res of iterator) {
            results=JSON.parse(res.value.toString())
            counter=counter+1;
            }
        if (counter>1){
            throw new Error('This state-value pair is not unique');
        }else if (counter===0){
            return false;
        }
        return results;
    }


    /**
     *
     * @param {*} ctx
     * @param {*} docTypeName
     * @param {*} userID
     * @returns
     */
    // Auxiliary function to retrieve a value associated with a partial key. It is expected that
    // this value is unique. One partial key may have multiple values associated to itself.
    async _mygetStateByPartialCompositeKey(ctx, docTypeName, userID){
        const iterator=await ctx.stub.getStateByPartialCompositeKey(docTypeName,[userID]);
        let counter=0;
        let results;

        for await (const res of iterator) {
            results=JSON.parse(res.value.toString())
            counter=counter+1;
        }
        if (counter>1){
            throw new Error('This state-value pair is not unique');
        }else if (counter===0){
            return true;
        }
        return results;
    }

    // returns which proportion is allocated to coupon and which to principal
    async _getCouponProportion(ctx,poolName){
        let iterator=await ctx.stub.getStateByPartialCompositeKey(poolName,[]);
        let result;
        for await (const res of iterator) {
            result=JSON.parse(res.value.toString())
        }
        return result.CouponPortion
    }


    // This auxiliary function will allow us to determine to which identity are we going to pay the bills
    async _isPPAinPool(ctx,ppaID){
        let pool=await this._getPoolStateByPartialCompositeKey(ctx,'POOL');
        let res=[];
        if (!pool || pool.length === 0){
            res.push(false)
            return res
        }
        const containsppaID =await pool.ppaIDs.includes(ppaID);
        res.push(containsppaID);
        res.push(pool.Owner)
        return res
    }


    // This function will contain the contractual terms of the physical PPA
    // This function will be run by Originator, who will propose a PPA to a particular user, by means
    // of his/her user ID. This function will need a myriad of input arguments.
    async PPAProposal(ctx,ownerID,customerID,date){
        // Prior verifications
        const userID=await ctx.GetUserIdentity('cif');
        console.log(userID);
        if (userID!==ownerID){
            throw new Error(`Field ownerID ${ownerID} does not match your user identity of the ecert`);
        }
        if (ownerID===customerID){
            throw new Error(`Check owner and customer identities`);
        }

        // PPA ID will be a "sum" of multiple keys, one of them is a free-collision key, the txID
        // This is not necessary, because each user will be subscribed to just one PPA
        const genericID=await ctx.stub.getTxID();

        // Create this composite Key
        const ppaID=await ctx.stub.createCompositeKey('PPA',[customerID,genericID]);

        // We also verify if a farmer/irrigator has already been offered a PPA
        const ppaHasBeenProposed= await this._isPPAProposed(ctx,ppaID);
        if (ppaHasBeenProposed){
            throw new Error(`Error: PPA for user ${customerID} has already been offered`);
        }
        // console.log('aqui2')

        // TODO
        // We define parameters of the PPA, just in case these parameters are common parameters.
        const day=1;
        const month=10;
        const year= 2032

        const ordinaryTerminationDate=new Date(year,month-1,day).setHours(0,0,0,0);
        const firstExtension=Date(year,month-2,day);

        const customer='';
        // const customerID='';
        const customerEmail=ctx.GetUserIdentity('email');
        // Owner is the ecert whose identity has proposed this PPA
        // const owner= ctx.clientIdentity.getID();
        const system= '';
        const land= '';
        const landID= '';
        const lastingPeriod= '';
        // const ordinaryTerminationDate= '';
        const advancedTerminated= '';
        const startDate= '';
        const extendedAgreement= '';
        const initialExtensions= '';
        // const firstExtension= '';
        const secondExtension= '';
        const extensionTimePriorToOrdinaryTerminationDate= '';
        const isExtensionMandatory= '';
        const additionalExtensions= '';
        const additionalExtensionTimePriorToLastAdditionalExtension= '';
        const additionalExtensionContractPrice= '';
        const isAdditionalExtension= '';
        const purchaseOption= '';
        const contractPrice= '';
        const paymentsFrequency= 12;
        const unitPrice= '';
        const minimumMonthlyFee= 100;
        // const firstMonthlyPayment= '';
        // const succesiveMonthlyPayments= '';
        const dismantlingSystemIncluded= '';
        const settlementBillingBussinesDays= '';
        const dueAmountsDays= '';
        const isInterestTriggered= '';
        const sellToThirdParties= '';
        const amountPayableToCustomer= '';
        const settlementAmountPayableDays= '';
        const amountPayableType= '';
        const highestEnergyDemandConexion= '';
        const grantFinancialAidBeneficiary= '';
        const netAmountSubsidy= '';
        const reductionContractPriceFees= '';
        const grantCollectionTime= '';
        const customerGoodFaith= '';
        const systemLandMaintenance= '';
        const maintenanceHistory= '';
        const powerSupplyInterruption= '';
        const powerSupplyInterruptionAdvancedTime= '';
        const anomalyCircumstance= '';
        const isCustomerAuthorized= '';
        const additionalPowerSupplyInterruption= '';
        const powerSupplyInterruptionCause= '';
        const extraordinaryExpenses= '';
        const isMaintenanceNecessary= '';
        const legalObligationSystemLand= '';
        const measurementEquipementResponsibility= '';
        const annualAccountsTime= '';
        const annualAccounts= '';
        const informationChangedTime= '';
        const highSpeedInternetConection= '';
        const lastModificationOn= new Date(date);
        const lastModificationUserID= '';
        const isSigned= false;
        const energyConsumption= [];
        const facturacionMensual= [];
        const lastEnergyConsumption='';
        const lastFacturacionMensual='';

        // Defining attributes of the object PPA
        const PPA={
            docType: 'PPA',
            ppaID: ppaID,
            Customer: customer,
            CustomerID: customerID,
            // CustomerEmail: customerEmail,
            // OwnerID: ownerID,
            // Owner: await ctx.clientIdentity.getID(),
            // System: system,
            // Land: land,
            // LandID: landID,
            // LastingPeriod: lastingPeriod,
            // OrdinaryTerminationDate: ordinaryTerminationDate,
            // AdvancedTerminated: advancedTerminated,
            // StartDate: startDate,
            // EnergyConsumption: energyConsumption,
            // ExtendedAgreement: extendedAgreement,
            // InitialExtensions: initialExtensions,
            // FirstExtension: firstExtension,
            // SecondExtension: secondExtension,
            // BillDate: '',
            // ExtensionTimePriorToOrdinaryTerminationDate: extensionTimePriorToOrdinaryTerminationDate,
            // IsExtensionMandatory: isExtensionMandatory,
            // AdditionalExtensions: additionalExtensions,
            // AdditionalExtensionTimePriorToLastAdditionalExtension: additionalExtensionTimePriorToLastAdditionalExtension,
            // AdditionalExtensionContractPrice: additionalExtensionContractPrice,
            // IsAdditionalExtension: isAdditionalExtension,
            // PurchaseOption: purchaseOption,
            // ContractPrice: contractPrice,
            // PaymentsFrequency: paymentsFrequency,
            // FacturacionMensual: facturacionMensual,
            // LastFacturacionMensual: lastFacturacionMensual,
            // LastEnergyConsumption: lastEnergyConsumption,
            // EnergyConsumption: energyConsumption,
            // UnitPrice: unitPrice,
            // MinimumMonthlyFee: minimumMonthlyFee,
            // DismantlingSystemIncluded: dismantlingSystemIncluded,
            // SettlementBillingBussinesDays: settlementBillingBussinesDays,
            // DueAmountsDays: dueAmountsDays,
            // IsInterestTriggered: isInterestTriggered,
            // SellToThirdParties: sellToThirdParties,
            // AmountPayableToCustomer: {
            //     myMethod: () => {
            //         if (!PPA.SellToThirdParties){
            //             return 0
            //         }
            //         return 100
            //     }
            // },
            // SettlementAmountPayableDays: settlementAmountPayableDays,
            // AmountPayableType: amountPayableType,
            // HighestEnergyDemandConexion: highestEnergyDemandConexion,
            // GrantFinancialAidBeneficiary: grantFinancialAidBeneficiary,
            // NetAmountSubsidy: netAmountSubsidy,
            // ReductionContractPriceFees: reductionContractPriceFees,
            // GrantCollectionTime: grantCollectionTime,
            // CustomerGoodFaith: customerGoodFaith,
            // SystemLandMaintenance: systemLandMaintenance,
            // MaintenanceHistory: maintenanceHistory,
            // PowerSupplyInterruption: powerSupplyInterruption,
            // PowerSupplyInterruptionAdvancedTime: powerSupplyInterruptionAdvancedTime,
            // AnomalyCircumstance: anomalyCircumstance,
            // IsCustomerAuthorized: isCustomerAuthorized,
            // AdditionalPowerSupplyInterruption: additionalPowerSupplyInterruption,
            // PowerSupplyInterruptionCause: powerSupplyInterruptionCause,
            // ExtraordinaryExpenses: extraordinaryExpenses,
            // IsMaintenanceNecessary: isMaintenanceNecessary,
            // LegalObligationSystemLand: legalObligationSystemLand,
            // MeasurementEquipementResponsibility: measurementEquipementResponsibility,
            // AnnualAccountsTime: annualAccountsTime,
            // AnnualAccounts: annualAccounts,
            // InformationChangedTime: informationChangedTime,
            // HighSpeedInternetConection: highSpeedInternetConection,
            // LastModificationOn: lastModificationOn,
            // LastModificationUserID: lastModificationUserID,
            // IsSigned: isSigned,
            // IsServiceMaintenanceOn: false,
            // IsLastBillPaid: false,
        };

        const valueBuffer = Buffer.from(JSON.stringify(PPA));

        // set event must be inside after transaction
        await ctx.SetEventPayload(valueBuffer);
        await ctx.SetEventName('PPAproposed');



        // await ctx.stub.putState('ppa',valueBuffer);
        await ctx.stub.putState(ppaID,valueBuffer);
        return PPA
    }

    async RequestPPA(ctx,userID, landID,crops){
        const userID= await ctx.GetUserIdentity('cif');
        let requestID=await ctx.stub.getTxID();
        let PPARequest={
            ID: requestID,
            UserID: userID,
            LandID:landID,
            Crops: crops,
        };
        const valueBuffer = Buffer.from(JSON.stringify(PPARequest));

        // set event must be inside after transaction
        await ctx.SetEventPayload(valueBuffer);
        await ctx.SetEventName('PPARequested');

        await ctx.stub.putState(PPARequest.ID,valueBuffer);
        return PPARequest
    }

    async QueryMyPPA(ctx,ppaID){
        const userID= await ctx.GetUserIdentity('cif');
        const ppaBytes=await ctx.stub.getState(ppaID);
        if (!ppaBytes || ppaBytes.length === 0){
            throw new Error(`PPA state with ID ${ppaID} does not exist`);
        }
        const ppa=JSON.parse(ppaBytes.toString());

        if (userID!==ppa.CustomerID){
            throw new Error(`Field CustomerID does not match your user identity of the eCert`);
        }
        return ppa
    }


    // Farmer/Irrigator will execute this function and by doing that, he/she accepts/signs the PPA
    // proposal
    async AcceptPPA(ctx,ppaID,date){
        // we retrieve the value associated with this partial key
        const userID= await ctx.GetUserIdentity('cif');
        const ppaBytes=await ctx.stub.getState(ppaID);
        if(!ppaBytes || ppaBytes.length === 0){
            throw new Error(`Error PPA with ID ${ppaID} does not exist`);
        }
        const ppa=JSON.parse(ppaBytes.toString());
        // ppa returns true if no PPA Contract for that userID has been issued.
        // ppa returns error if something is wrong with PPA Contract
        // Otherwise, ppa returns ppa value for that partial key

        if (ppa.CustomerID!==userID){
            throw new Error(`You are not allowed to perform this action`);
        }

        // Check if attribute IsSigned is true
        if (ppa.IsSigned){
            throw new Error(`Your PPA has been already signed`);
        }

        // Otherwise, change the IsSigned state.
        ppa.IsSigned=true;
        // ppa.Customer=await ctx.clientIdentity.getID();

        // Attach current date
        ppa.LastModificationOn=new Date(date);

        const valueBuffer = Buffer.from(JSON.stringify(ppa));


        await ctx.SetEventPayload(valueBuffer);
        await ctx.SetEventName('PPAaccepted')
        await ctx.stub.putState(ppa.ppaID,valueBuffer);
        return ppa
    }

    // If a farmer signs a PPAproposal, originator will receive its event and according to it, will issue a POOL token that
    // will record every ppaID. The owner of this Token will receive the payments farmers will do.
    // This will be the pool of PPAs
    async MintPPA(ctx,ppaID,date){
        const genericID=await ctx.stub.getTxID();
        const ppaBytes=await ctx.stub.getState(ppaID);

        if (!ppaBytes || ppaBytes.length === 0){
            throw new Error(`Error: no State related to key ${ppaID}`);
        }
        const ppa=JSON.parse(ppaBytes.toString());
        const userID= await ctx.GetUserIdentity('cif');
        if (userID!==ppa.OwnerID){
        	throw new Error(`Field ownerID does not match your user identity of the ecert`);
        }
        if (!ppa.IsSigned){
            throw new Error('This PPA has not been signed');
        }
        if (ppa.IsIssued){
            throw new Error(`This PPA is already inside the POOL`);
        }

        // Include PPA Key inside Pool of assets
        let pool;
        let hasBeenCreated=await this._isPoolCreated(ctx);

        if (hasBeenCreated===0){
            pool={
                poolID: '',
                ppaIDs: [],
                OwnerID: '',
                LastModificationOn: new Date(date),
                CouponPortion: 1,
            }
            pool.OwnerID=ppa.OwnerID;
            pool.ppaIDs.push(ppa.ppaID);
            pool.poolID=await ctx.stub.createCompositeKey('POOL',[genericID]);
            console.log(pool);
            await ctx.stub.putState(pool.poolID,Buffer.from(JSON.stringify(pool)));
        }else{
            pool=await this._getPoolStateByPartialCompositeKey(ctx,'POOL');
            console.log(pool)
            pool.OwnerID=ppa.OwnerID;
            pool.ppaIDs.push(ppa.ppaID);
            ppa.LastModificationOn=new Date(date);
            await ctx.stub.deleteState(pool.poolID);
            pool.poolID=await ctx.stub.createCompositeKey('POOL',[genericID]);
            await ctx.stub.putState(pool.poolID,Buffer.from(JSON.stringify(pool)));
        }
        let valueBuffer=Buffer.from(JSON.stringify(pool));
        await ctx.SetEventPayload(valueBuffer);
        await ctx.SetEventName('PPAtokenMinted');
        return pool
    }


    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ---------------------------------------TODO-----------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------

    /**
     *
     * @param {Context} ctx
     * @param {string} argtype is the default types of maintenance services originator is
     *  able to provide
     */
    // Farmer will execute this function in order to request one of the default maintenance services
    // offered by Originator. She/He will record the date request was made, so originator must be listening
    // to events of this type if no overexpenses are considered
    async MaintenanceServiceRequest(ctx, ppaID, serviceMaintenanceType,date){
        const maintenanceType=[
            {
                name: 'service1',
                price: 12
            },
            {
                name: 'service2',
                price: 12
            },
            {
                name: 'service3',
                price: 12
            },
        ];

        const userID=await ctx.GetUserIdentity('cif');
        const ppaBytes=await ctx.stub.getState(ppaID);
        if (!ppaBytes || ppaBytes.length === 0){
            throw new Error(`PPA with ID ${ppaID} does not exist`);
        }
        const ppa=JSON.parse(ppaBytes.toString());
        // check ID of eCert and ID of PPA customer
        if (userID!==ppa.CustomerID){
            throw new Error(`Customer ID and User ID do not match`);
        }

        // We check if it has been signed
        if (!ppa.IsSigned){
            throw new Error('This PPA has not been signed');
        }

        if (ppa.IsInDefault){
            throw new Error(`You are not allowed to perform this action`)
        }
        const solution=maintenanceType.find( service => service.name === serviceMaintenanceType ) ;
        // Prior input parameters verifications
        if (solution===undefined) {
            throw new Error(`The ${serviceMaintenanceType} service is not available`);

        } else {
            ppa.MaintenanceServiceRequest=solution.name;
            ppa.LastMaintenanceServiceOn=new Date(date);
            ppa.ServiceRequestDate=new Date(date);
        }

        ppa.LastModificationOn=new Date(date);
        ppa.IsServiceMaintenanceOn=true;
        ppa.LastModificationUserID=userID;
        // En golang los Bytes de la ID funcionan bien
        const valueBuffer = Buffer.from(JSON.stringify(ppa));
        await ctx.stub.putState(ppa.ppaID,valueBuffer);
        await ctx.SetEventName('MaintenanceRequired');
        await ctx.SetEventPayload(valueBuffer);
        return ppa
    }



    // for simplicity we are not considering a symbiosys between oracles and blockchain
    // networks (in this version), so we will introduce that real time parameters as a function
    // which will be called beforeTransaction (or not). That parameters state will include current
    // electricity price, current payment proportion between principal and coupon...
    // async WriteCommonRealTimeParameters(ctx,currentElectricityPrice, paymentProportionAllocated,date){
    //     // At the moment no identity verifications
    //     // Who can commit this function????

    //     // We are going to assign an easy-to-query key
    //     const key='RealTimeParameters';
    //     // Check if this doc already exists
    //     const oldvalueBytes=await ctx.stub.getState(key);
    //     let value;
    //     if (!oldvalueBytes || oldvalueBytes.length === 0) {
    //         value={
    //             ID: key,
    //             ElectricityPrice: currentElectricityPrice,
    //             ProportionAllocated: paymentProportionAllocated,
    //             LastModificationOn: new Date(date)
    //         };
    //         const valueBuffer = Buffer.from(JSON.stringify(value));
    //         await ctx.stub.putState(key, valueBuffer);
    //     }
    //     value= JSON.parse(oldvalueBytes.toString());
    //     value.key=key;
    //     value.ElectricityPrice=currentElectricityPrice;
    //     value.ProportionAllocated=paymentProportionAllocated;
    //     value.LastModificationOn= new Date(date);
    //     const valueBuffer= Buffer.from(JSON.stringify(value));
    //     await ctx.stub.putState(key,valueBuffer);
    // }

    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------


    // could this function be executed from .job file?
    // Originator will execute this function monthly to update the PPA with data about energy
    // consumption
    async EnergyConsumptionPerPPA(ctx,ppaID,energyConsumption,date){
        let ownerID=await ctx.GetUserIdentity('cif');
        // retrieve PPA state
        const ppaBytes=await ctx.stub.getState(ppaID);
        if(!ppaBytes || ppaBytes.length === 0){
            throw new Error(`State with ID ${ppaID} does not exist`)
        }
        let ppa=JSON.parse(ppaBytes.toString());
        // check if owner of the PPA (originator) matches the client who executes this function
        if (ownerID!==ppa.OwnerID){
            throw new Error(`You are not allowed to perform this action`);
        }
        if (!ppa.IsSigned){
            throw new Error('This PPA has not been signed');
        }

        const energy=parseFloat(energyConsumption);
        // update the date
        ppa.LastModificationOn=new Date(date);


        // these data will be reset once a year (once its size is equal to 12)
        if (ppa.EnergyConsumption.length===ppa.PaymentsFrequency){
            ppa.EnergyConsumption=[];
        }

        if (!ppa.IsLastBillPaid){
            ppa.IsInDefault=true;
        }else{
            ppa.IsInDefault=false;
        }
        // append data
        ppa.EnergyConsumption.push(energy);
        ppa.LastEnergyConsumption=energy;
        ppa.LastModificationUserID=ownerID;
        ppa.BillDate=ppa.LastModificationOn;
        ppa.IsLastBillPaid=false;
        const ppaBuffer= Buffer.from(JSON.stringify(ppa));
        await ctx.stub.putState(ppa.ppaID,ppaBuffer);
        await ctx.SetEventName('BillDelivered')
        await ctx.SetEventPayload(ppaBuffer);
        return ppa
    }

    // TODO: add non working days
    // This auxiliary function serves to compute the time between two dates, including if there are
    // non working days in between. It serves to pay bills, to maintenance service request and every function
    // which involves a fixed period of time to be executed.
    async _checkNonWorkingDays(currentDate,notificationDate){
        const nonWorkingDay1=new Date(2022,0,1)
        const nonWorkingDay2=new Date(2021,11,25);
        const nonWorkingDay3=new Date(2022,4,1)

        const nonWorkingDays=[nonWorkingDay1,nonWorkingDay2,nonWorkingDay3]

        const new_resultados=nonWorkingDays.filter(day=>day>=notificationDate && day<=currentDate)
        return new_resultados.length
    }

    // Once originator has issued a bill, farmer/irrigator must pay for the consumed energy in a
    // certain period of time, otherwise farmer will be considered a defaulter
    async MonthlyBillPayout(ctx, ppaID,tokenID, typeID, date){
        // TODO: Igual es necerario que algun dato salga de algun oracle

        // retrieve the state of the token
        const userID= await ctx.GetUserIdentity('cif');
        const compositeKey=await ctx.stub.createCompositeKey('securitizationCoin',[userID,tokenID,typeID]);
        const tokenBytes=await ctx.stub.getState(compositeKey);
        if (!tokenBytes || tokenBytes.length === 0){
            throw new Error(`Error token with ID ${compositeKey} does not exist`);
        }
        const token=JSON.parse(tokenBytes.toString());

        if (!token.CanBeUsed){
            throw new Error(`Error, token with ID ${tokenID} is allocated to other services. Try to use another key or cancel whatever your token is allocated to`);
        }

        // Now we retrieve the PPA associated with userDNI
        const valueBytes=await ctx.stub.getState(ppaID);

        if (!valueBytes || valueBytes.length === 0){
            throw new Error(`PPA with ID ${ppaID} does not exist`);
        }

        let value= JSON.parse(valueBytes.toString());
        // Check if customer and user who send transaction proposal match
        // Not compulsory, we have already checked this with the ppa proposal
        if (value.CustomerID!==userID){
            throw new Error(`You are not allowed to perform this action`);
        }
        if (!value.IsSigned){
            throw new Error(`PPA with ID ${ppaID} has not been signed`);
        }

        // Check if there are non working days between these dates
        const currentDate=new Date(date);
        const billDate=new Date(value.BillDate);

        const numberNonworkingDays=await this._checkNonWorkingDays(currentDate,billDate);

        const diff_days=(currentDate.getTime() - billDate.getTime())/(1000*3600*24);
        // TODO: not sure about this. If user wish to pay, should we accept later payments? better than nothing...

        // check if current day is inside boudary dates
        const limitDate=value.LimitDate+numberNonworkingDays;
        if (diff_days>limitDate){
            throw new Error(`Try to pay on time`);
        }

        // These functions should be included in the PPA object
        // Define functions to determine the price to pay for
        const myFunctions={
            firstMonthlyPayment:  (par_UnitPrice,par_EnergyConsumption, par_MinimumMonthlyFee) => {
                const values=[par_UnitPrice*par_EnergyConsumption,par_MinimumMonthlyFee]
                // const values=[PPA.UnitPrice*PPA.LastEnergyConsumption,PPA.MinimumMonthlyFee];
                const resultado=Math.max(...values);
                return resultado
            },
            succesiveMonthlyPayments: (par_LastEnergyConsumption,par_UnitPrice,par_MinimumMonthlyFee,par_EnergyConsumption,par_FacturacionMensual) => {
                let total=par_FacturacionMensual.reduce(function(a, b){ return a + b; });
                const values=[par_LastEnergyConsumption*par_UnitPrice,Math.abs(par_MinimumMonthlyFee*par_EnergyConsumption.length-total)];
                const resultado=Math.max(...values);
                return resultado
            },
        };

        if (value.IsLastBillPaid){
            throw new Error(`You have already paid this bill`);
        }

        // depending on which period we stay, i.e depending on which size energyconsumption has, which
        // is our History per year
        let bill;

        if (value.EnergyConsumption.length===1){
            bill=myFunctions.firstMonthlyPayment(value.UnitPrice,value.LastEnergyConsumption,value.MinimumMonthlyFee);
        }else{
            // }else if (value.EnergyConsumption.length!==0){
            bill=myFunctions.succesiveMonthlyPayments(value.LastEnergyConsumption,value.UnitPrice,value.MinimumMonthlyFee,value.EnergyConsumption,value.FacturacionMensual);
        }

        let new_bill=bill.toFixed(2);
        // Now it is clear how much has the farmer to pay for, it is time to pay (send his/her tokens)
        const myMoney=token.Amount;
        const balance=myMoney-parseInt(new_bill*100);
        if (balance<0){
            throw new Error(`Please add more coins to your wallet, or pool them. Bill amounts to ${new_bill}`);
        }

        value.FacturacionMensual.push(new_bill);
        value.LastFacturacionMensual=new_bill;
        value.LastModificationOn=currentDate;
        value.LastModificationUserID=userID;
        value.IsLastBillPaid=true;

        // retrieve PPA Pool state in order to allocate tokens to pool owner or to ppa Owner if ppa
        // is not inside pool


        let [isInside, owner]=await this._isPPAinPool(ctx,value.ppaID);
        if (!owner || !isInside){
            // bill paid to PPA Owner
            owner=value.OwnerID
        }
        let ret
        let couponPortion=await this._getCouponProportion(ctx,'POOL');

        // Igual asi es mejor 
        // if(isInside){

        // }else{

        // }

        // el caso de que no este dentro de la Pool no existiria usando este statement
        if (couponPortion===1){
            ret=await this._TransferMoney(ctx,token.ID,new_bill,owner,userID)
        }else{
            // else we must allocate p*Bill tokens to Coupon Payments which will be CanBeUsed=true Tokens
            // and 1-p tokens to Principal payment which will be CanBeUsed=false Tokens
            ret=await this._TransferMoneyToCouponAndPrincipal(ctx,token.ID,new_bill,couponPortion,owner,userID)
        }
        // let CouponPortion=await this._isCouponPortion
        // if()
        // TODO
        // tranfer to tokens' owner
        // let ret=await this._TransferMoney(ctx,token.ID,new_bill,owner,userID)
        await ctx.stub.putState(value.ppaID,Buffer.from(JSON.stringify(value)))
        return ret
    }

    // As a simplicity we will assume that each user will use just one token ID to pay the bill. If a
    // user has some IDs that putting together reach the desirable value, the user will
    // pool his tokens, otherwise he/she will not commit the tx

    /**
     *
     * @param {*} ctx
     * @param {*} tokenID
     * @param {*} amount
     * @param {*} receiverID
     */
    // Auxiliary function to transfer the money farmers pay.
    async _TransferMoney(ctx,tokenID, amount, receiverID,userID){
        // No prior verifications needed, because they have been checked in main function, which is
        // MonthlyPayout
        const tokenBytes=await ctx.stub.getState(tokenID);
        if (!tokenBytes || tokenBytes.length === 0) {
            throw new Error(`Error: no token associated with ID ${tokenID}`);
        }
        const token=JSON.parse(tokenBytes.toString());

        const balance=token.Amount-amount;


        const issuer=ctx.clientIdentity.getID();
        const genericID=await ctx.stub.getTxID();
        let typeID;
        const key1=await ctx.stub.createCompositeKey('securitizationCoin',[userID,genericID]);
        const key2=await ctx.stub.createCompositeKey('securitizationCoin',[receiverID,genericID]);

        typeID=':1'
        const utxo1={
            ID: key1+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: token.Owner,
            Issuer: issuer,
            Amount: balance,
            Factor: 100,
            CanBeUsed: true
        };
        typeID=':0';
        const utxo2={
            ID: key2+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: receiverID,
            Issuer: issuer,
            Factor: 100,
            Amount: amount,
            CanBeUsed: true
        };

        let utxos=[];
        await ctx.stub.deleteState(token.ID);
        await ctx.stub.putState(utxo2.ID,Buffer.from(JSON.stringify(utxo2)));
        if (balance!==0){
            await ctx.stub.putState(utxo1.ID,Buffer.from(JSON.stringify(utxo1)));
            utxos=[utxo1,utxo2]
            return utxos
        }else{
            utxos=[utxo2]
            return utxos
        }
    }

    async _TransferMoneyToCouponAndPrincipal(ctx,tokenID, amount, couponPortion,receiverID,userID){
        // No prior verifications needed, because they have been checked in main function, which is
        // MonthlyPayout
        const tokenBytes=await ctx.stub.getState(tokenID);
        if (!tokenBytes || tokenBytes.length === 0) {
            throw new Error(`Error: no token associated with ID ${tokenID}`);
        }
        const token=JSON.parse(tokenBytes.toString());

        const balance=token.Amount-amount;
        console.log('balance')
        console.log(balance)


        const issuer=ctx.clientIdentity.getID();
        const genericID=await ctx.stub.getTxID();
        let typeID;
        const key1=await ctx.stub.createCompositeKey('securitizationCoin',[userID,genericID]);
        const key2=await ctx.stub.createCompositeKey('securitizationCoin',[receiverID,genericID]);

        typeID=':1'
        const utxo1={
            ID: key1+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: token.Owner,
            Issuer: issuer,
            Amount: balance,
            Factor: 100,
            CanBeUsed: true
        };
        // this utxo2 will be allocated to Coupon
        typeID=':0';
        const utxo2={
            ID: key2+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: receiverID,
            Issuer: issuer,
            Factor: 100,
            Amount: couponPortion*amount,
            CanBeUsed: true
        };
        typeID=':2';
        const utxo3={
            ID: key2+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: receiverID,
            Issuer: issuer,
            Factor: 100,
            Amount: (1-couponPortion)*amount,
            CanBeUsed: false
        };


        let utxos=[];
        await ctx.stub.deleteState(token.ID);
        await ctx.stub.putState(utxo2.ID,Buffer.from(JSON.stringify(utxo2)));
        await ctx.stub.putState(utxo3.ID,Buffer.from(JSON.stringify(utxo3)));
        if (balance!==0){
            await ctx.stub.putState(utxo1.ID,Buffer.from(JSON.stringify(utxo1)));
            utxos=[utxo1,utxo2,utxo3]
            return utxos
        }else{
            utxos=[utxo2,utxo3]
            return utxos
        }
    }



    // // TODO: Who can execute this function??
    // /**
    //  *
    //  * @param {*} ctx
    //  * @param {*} userID
    //  * @param {*} date
    //  */
    // // Each period, originator will check how are performing the PPAs he has offered. This will update
    // // if some irrigator is a defaulter or not.
    // async MonthlyPerformance(ctx, ppaID,date){
    //     const ppaBytes=await ctx.stub.getState(ppaID);

    //     if (!ppaBytes || ppaBytes.length === 0){
    //         throw new Error(`This PPA ID ${ppaID} does not exist`);
    //     }
    //     let ppa=JSON.parse(ppaBytes.toString())
    //     // Now we check its performance and update PPA according to elapsed time between current date
    //     // and payment date or other dates
    //     const currentlyDate=new Date(DATE)
    //     // Were bills paid on time?

    //     // Check difference between dates


    //     // TODO: the rest of verifications


    //     // ppa.LastModificationOn=date;
    //     // ppa.LastModificationUserID=userID;

    //     const ppaBuffer= Buffer.from(JSON.stringify(ppa));
    //     await ctx.stub.putState(ppa.ppaID,ppaBuffer)
    // }

    // TODO:
    // change userID -> ppaID
}





// This is another contract which defines a new bussiness: the acquisition of PPA Tokens,
// valuation of the pool on-chain and  transference of the bonds
class bondIssuanceContract extends Contract {
    constructor() {
        super('bonds.securitization.com')
    }

    createContext() {
        return new securitizationContext();
    }

    // This function is expected to return just one value associated with the partialKey of the user Identity Number
    async _mygetStateByPartialCompositeKey(ctx, name, userID){
        const iterator=await ctx.stub.getStateByPartialCompositeKey(name,[userID]);
        let counter=0;
        let results;

        for await (const res of iterator) {
            results=JSON.parse(res.value.toString())
            counter=counter+1;
            }
        if (counter>1){
            throw new Error('This state-value pair is not unique');
        }else if (counter===0){
            return true;
        }
        return results;
    }

    // Prior verifications included in beforeTransaction logic
    async beforeTransaction(ctx) {
        let userMSPID=ctx.GetMSPID();
        if (userMSPID!=='originatorMSP' && userMSPID!=='spvMSP' && userMSPID!=='ratingagencyMSP'){
            throw new Error(`Your organization ${userMSPID} is not allowed to perform this action`);
        }
        let isClient=await ctx.GetRole();
        if (!isClient){
            throw new Error(`You are not allowed to perform this action`);
        }
        await ctx.SetMSPID(userMSPID);
        let par=await ctx.stub.getFunctionAndParameters();
        let func = par.fcn;
        let params=par.params;
        for (let i=0;i<params.length;i++){
            if (params[i]===''){
                throw new Error('There is at least one empty parameter');
            }
        }
        switch(func){
            case 'BuyRequest':
                if (ctx.mspid!=='spvMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'SellRequest':
                if (ctx.mspid!=='originatorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'SignRequestOriginator':
                if (ctx.mspid!=='originatorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'SignRequestSPV':
                if (ctx.mspid!=='spvMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'Rating':
                if (ctx.mspid!=='ratingagencyMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'IssueBond':
                if (ctx.mspid!=='spvMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'QueryPool':
                if (ctx.mspid!=='spvMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'QuerySellRequest':
                if (ctx.mspid!=='spvMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'QueryBuyRequest':
                if (ctx.mspid!=='originatorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
        }
    }

    async afterTransaction(ctx){
        let event=await ctx.GetEventPayload();
        return event
    }

    /**
     *
     * @param {*} ctx
     * @returns the size of the pool
     */
    async _isPoolCreated(ctx,poolName){
        const iterator=await ctx.stub.getStateByPartialCompositeKey(poolName,[]);
        let results=[];
        for await (const res of iterator) {
            // push key instead of value json
            results.push(res.key);
        }
        if (results.length === 0){
            return false
        }else if (results.length===1){
            return true;
        }else{
            throw new Error(`State not unique`)
        }
    }

    /**
     *
     * @param {*} ctx
     * @param {*} docTypeName
     * @returns the state associated with that partial key
     */
    // This auxiliary function will only work with those states expected to be unique (POOL, REALTIMEPARAMETERS, RATING...)
    async _getPoolStateByPartialCompositeKey(ctx, docTypeName){
        const iterator= await ctx.stub.getStateByPartialCompositeKey(docTypeName,[]);
        let counter=0;
        let results;
        let isCreated;
        let res=[]
        for await (const res of iterator) {
            results=JSON.parse(res.value.toString())
            counter=counter+1;
        }
        console.log(`counter: ${counter}`)
        if (counter===1){
            isCreated=true
            res.push(isCreated);
            res.push(results)
            return res;
        }else if (counter===0){
            isCreated=false;
            res.push(isCreated);
            return res;
        }else{
            throw new Error('This state-value pair is not unique');
        }
    }

    async QueryPool(ctx,poolName){
        let pool=await this._getPoolStateByPartialCompositeKey(ctx,poolName);
        if (!pool[0] && pool.length===1){
            throw new Error(`There is no Pool linked to name ${poolName}`)
        }
        return pool[1]
    }


    /**
     *
     * @param {*} ctx
     * @param {*} amount
     * @param {*} price
     * @param {*} toIdentity
     */
    // SPV will want to buy the pool of assets that originator owns, but firstly she/he needs
    // to submit a request to buy it.
    async BuyRequest(ctx,amount,price){
        // TODO: originator must achieve a certain pool size to sell??
        //       what if actual pool size is greater than spv wants
        // if (await this._isPoolCreated(ctx,poolName)===false){
        //     throw new Error(`Pool still not created`)
        // }
        const userID=await ctx.GetUserIdentity('cif');

        const genericID=await ctx.stub.getTxID();
        const requestID=await ctx.stub.createCompositeKey('BuyRequest',[userID,genericID]);

        let value={
            ID: requestID,
            Owner: userID,
            Receiver: '',
            Amount: parseInt(amount),
            Price: parseInt(parseFloat(price)*100),
            IsSigned: false,
            Factor:100
        };

        const valueBuffer = Buffer.from(JSON.stringify(value));
        await ctx.stub.putState(requestID,valueBuffer);
        await ctx.SetEventName('BuyRequestIssued');
        await ctx.SetEventPayload(valueBuffer);
        return value
    }

    async QueryBuyRequest(ctx){
        let iterator=await ctx.stub.getStateByPartialCompositeKey('BuyRequest')

        let results=[]
        for await (const res of iterator){
            results.push(JSON.parse(res.value.toString()))
        }
        return results

    }


    /**
     *
     * @param {*} ctx
     * @param {*} price
     * @param {*} toIdentity
     */
    // Originator submits a sell request to SPV
    async SellRequest(ctx, price, poolID){
        const userID=await ctx.GetUserIdentity('cif');

        const genericID=await ctx.stub.getTxID();
        const requestID=await ctx.stub.createCompositeKey('SellRequest',[userID,genericID]);

        let value={
            ID: requestID,
            Owner: userID,
            Receiver: '',
            Price: parseInt(parseFloat(price)*100),
            Factor: 100,
            IsSigned: false,
            BackedBy: poolID
        };
        const valueBuffer = Buffer.from(JSON.stringify(value));
        await ctx.stub.putState(requestID,valueBuffer);
        await ctx.SetEventName('SellRequestIssued');
        await ctx.SetEventPayload(valueBuffer);
        return value
    }

    async QuerySellRequest(ctx){
        let iterator=await ctx.stub.getStateByPartialCompositeKey('SellRequest')
        
        let results=[]
        for await (const res of iterator){
            results.push(JSON.parse(res.value.toString()))
        }
        return results
    }

    async QueryFullRequest(ctx){
        let iterator=await ctx.stub.getStateByPartialCompositeKey('FullRequest')
        
        let results=[]
        for await (const res of iterator){
            results.push(JSON.parse(res.value.toString()))
        }
        return results

    }
    /**
     *
     * @param {*} ctx
     * @param {*} type
     * @param {*} toIdentity  in real case toIdentity is an attribute linked to certificate
     */
    // cash owner must sign first
    // SPV accepts request. Check if she/he has enough funds
    async SignRequestSPV(ctx,tokenID,typeID, buyRequestID,sellRequestID,sellRequestPrice,sellRequestBackedBy,sellRequestOwner){
        const userID=await ctx.GetUserIdentity('cif');

        const buyRequestBytes=await ctx.stub.getState(buyRequestID);
        if (!buyRequestBytes || buyRequestBytes.length === 0) {
            throw new Error(`Buy request linked to ID ${buyRequestID} does not exist`)
        }
        const buyRequest=JSON.parse(buyRequestBytes.toString());
        // Check if this request has been already signed
        if (buyRequest.IsSigned){
            throw new Error(`Request has been already signed. Not allowed to perform this action`);
        }

        // As cash owner will signs the request, we must be sure that he is the owner of that amount
        // and maybe we should block his/her funds
        // I dont think this could be necessary because in the DvP we will execute both actions, and
        // if one of them does not succeed, noone will succeed.
        // In order to not create false requests we are going to freeze tokens

        const token_ID=await ctx.stub.createCompositeKey('securitizationCoin',[userID,tokenID]);
        const tokenBytes=await ctx.stub.getState(token_ID+typeID);
        if (!tokenBytes || tokenBytes.length === 0){
            throw new Error(`Error, Token with ID ${tokenID+typeID} does not exist`);
        }
        const myFunds=JSON.parse(tokenBytes.toString());

        if (!myFunds.CanBeUsed){
            throw new Error(`Your token has been already used`)
        }

        // Check our funds
        if (buyRequest.Price>myFunds.Amount){
            throw new Error(`Your token has not enough funds. Try to pool your token or ask for mint`);
        }

        // If we have enough funds, then we can sign the request
        buyRequest.IsSigned=true;

        // Retrieve sell request
        const sellRequestBytes=await ctx.stub.getState(sellRequestID);
        if (!sellRequestBytes || sellRequestBytes.length === 0) {
            throw new Error(`Sell Request does not exist or have been removed`)
        }
        let sellRequest=JSON.parse(sellRequestBytes.toString());
        if ( sellRequest.Price!==parseInt(sellRequestPrice) || sellRequest.BackedBy!==sellRequestBackedBy || sellRequest.Owner!==sellRequestOwner){
            throw new Error(`Sell Request has been modified`)
        }

        buyRequest.Receiver=sellRequestOwner;

        let txid=await ctx.stub.getTxID();

        const n_value={
            ID:'Request'+txid,
            buyRequest: buyRequest,
            sellRequest: sellRequest,
            TokenID: token_ID+typeID
        }
        const n_valueID= 'Request'+txid;
        const valueBuffer= Buffer.from(JSON.stringify(n_value));
        await ctx.stub.putState(n_valueID,valueBuffer);
        await ctx.stub.deleteState(sellRequest.ID);
        await ctx.stub.deleteState(buyRequest.ID);
        await ctx.SetEventName('SignSellRequest');
        await ctx.SetEventPayload(valueBuffer);
        return n_valueID
    }


    async _dvp(ctx,tokenID,securityID, tokensToTransfer){
        const tokenBytes=await ctx.stub.getState(tokenID);
        if (!tokenBytes || tokenBytes.length === 0) {
            throw new Error(`Error, Token state according to key ${tokenID} does not exist`);
        }
        const token=JSON.parse(tokenBytes.toString());

        const securityBytes=await ctx.stub.getState(securityID);
        if (!securityBytes || securityBytes.length === 0) {
            throw new Error(`Error, Pool state according to key ${securityID} does not exist`);
        }
        const security=JSON.parse(securityBytes.toString());

        if(!security.CanBeUsed || !token.CanBeUsed){
            throw new Error(`Token and/or security have been already used`)
        }
        
        const genericID=await ctx.stub.getTxID();

        // 'user' seria el que recibe el token/bono
        const key1=await ctx.stub.createCompositeKey('securitizationCoin',[token.Owner,genericID]);
        const key2=await ctx.stub.createCompositeKey('securitizationCoin',[security.Owner,genericID]);
        const securityKey1=await ctx.stub.createCompositeKey('POOL',[token.Owner,genericID]);


        const balanceTokens=token.Amount-tokensToTransfer;

        let utxo1;
        let utxo2;
        let typeID;

        typeID=':1';
        utxo1={
            ID: key1+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: token.Owner,
            Issuer: token.Issuer,
            Amount: balanceTokens,
            Factor: 100,
            CanBeUsed: true
        };
        typeID=':0';
        utxo2={
            ID: key2+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: security.Owner,
            Issuer: token.Issuer,
            Amount: tokensToTransfer,
            CanBeUsed: true
        };

        security.poolID=securityKey1;
        security.Owner=token.Owner;

        await ctx.stub.deleteState(tokenID);
        await ctx.stub.deleteState(securityID);

        await ctx.stub.putState(utxo2.ID,Buffer.from(JSON.stringify(utxo2)));
        await ctx.stub.putState(security.poolID,Buffer.from(JSON.stringify(security)));
        if (balanceTokens!=0){
            await ctx.stub.putState(utxo1.ID,Buffer.from(JSON.stringify(utxo1)));
        }

    }


    /**
     *
     * @param {*} ctx
     * @param {*} tokenid
     */
    // securities owner must sign afterwards
    // originator accepts request: enough securities
    async SignRequestOriginator(ctx,poolName, poolID,fullRequestID,buyRequestIdentity,buyRequestAmount,buyRequestPrice){
        const userID= await ctx.GetUserIdentity('cif');
        const valueBytes=await ctx.stub.getState(fullRequestID);
        if(!valueBytes || valueBytes.length === 0){
            throw new Error(`Request State does not exist`)
        }
        const value=JSON.parse(valueBytes.toString());

        // Originator in order to sign this request must provide an own PPA pool
        const tokenID= await ctx.stub.createCompositeKey(poolName,[poolID]);
        const poolBytes=await ctx.stub.getState(tokenID);
        if (!poolBytes || poolBytes.length === 0) {
            throw new Error(`Error, Pool State does not exist according to the key provided`);
        }
        console.log(value.buyRequest.Receiver);
        if (userID!==value.buyRequest.Receiver){
            console.log('dentro if1')
            throw new Error('You are not allowed to perform this action')
        }
        const pool=JSON.parse(poolBytes.toString());
        if (pool.Owner!==userID){
            console.log('dentro if2')
            throw new Error(`User ID ${userID} does not match Pool Owner`)
        }
        if (pool.ppaIDs.length!==value.buyRequest.Amount){
            throw new Error(`Size of Pool and size of Buy Request do not match`);
        }

        value.sellRequest.IsSigned=true;
        if (parseInt(buyRequestPrice)!==value.buyRequest.Price || parseInt(buyRequestAmount)!==value.buyRequest.Amount || buyRequestIdentity!==value.buyRequest.Owner){
            throw new Error('Some args of Full Request have been modified')
        }
        // DvP is triggered
        await this._dvp(ctx,value.TokenID,pool.poolID,value.buyRequest.Price);
        console.log('hasta aqui')
        await ctx.stub.deleteState(fullRequestID);
    }


    // TODO
    // Once SPV has acquired the Pool of PPAs, rating agency will assess PPA assets in order to
    // issue securities backed by the Pool.
    async Rating(ctx,poolID){
        const userID= await ctx.GetUserIdentity('cif');
        const poolBytes=await ctx.stub.getState(poolID);
        if (!poolBytes || poolBytes.length === 0){
            throw new Error(`Pool does not exist, not possible to attach a rating`)
        }
        const key=await ctx.stub.createCompositeKey('Rating',[poolID]);
        const value={
            ID: key,
            BackedBy: poolID,
            Owner: userID,
            RatingArgs: ""
        }
        const valueBuffer = Buffer.from(JSON.stringify(value));
        await ctx.stub.putState(key, valueBuffer);
        return value
    }


    //check if spv owns every ppa
    async IssueBond(ctx,ratingID,p){
        const userID= await ctx.GetUserIdentity('cif');
        // We retrieve data from rating
        const ratingBytes= await ctx.stub.getState(ratingID);
        if (!ratingBytes || ratingBytes.length === 0){
            throw new Error(`Rating still not delivered`);
        }
        const rating=JSON.parse(ratingBytes.toString());
        const poolID=rating.BackedBy;
        const poolBytes=await ctx.stub.getState(poolID);
        if (!poolBytes || poolBytes.length === 0){
            throw new Error(`Error, Pool State does not match Pool ID provided`);
        }
        const pool=JSON.parse(poolBytes.toString());
        if (pool.Owner!==userID){
            throw new Error(`User ID ${userID} does not own Pool`);
        }

        
        // Rating State will provide some attributes bons must have.
        const genericID=await ctx.stub.getTxID();
        const key=await ctx.stub.createCompositeKey('BondToken',[userID,genericID]);

        const new_pool={
            ppaIDs: pool.ppaIDs,
            Owner: pool.Owner,
            ID: pool.Name+genericID,
            Name: pool.Name,
            CouponPortion:p
        };

        const typeID=':0';
        const bondID=key+typeID;

        // TODO: every time there is an attribute namely Issuer, should it be
        // ctx.clientIdentity.getID() or ctx.clientIdentity.getIDBytes();

        const bondToken={
            ID: bondID,
            GenericID: genericID,
            TypeID: typeID,
            Rating: "",
            CouponRate: "",
            MaturityDate: "",
            Issuer: userID,
            Owner: userID,
            Pool: "",
            AmountPaid: "",
            OriginalValue: "",
            MonthlyPayout: "",
            RemainingPayments: "",
            Amount: 100000,
            CanBeUsed: true
        };
        let valueBuffer=Buffer.from(JSON.stringify(bondToken));
        await ctx.stub.putState(bondID, valueBuffer);
        await ctx.stub.deleteState(pool.ID)
        await ctx.stub.putState(new_pool.ID,Buffer.from(JSON.stringify(new_pool)))
        await ctx.SetEventName('BondsIssuance');
        await ctx.SetEventPayload(valueBuffer);
        return bondToken.ID
    }
}







class servicingContract extends Contract {
    constructor() {
        // Unique namespace when multiple contracts per chaincode file
        super('servicing.securitization.com');
    }

    createContext() {
        return new securitizationContext();
    }

    // TODO: change which orgs can execute this contract
    async beforeTransaction(ctx) {
        let userMSPID=ctx.GetMSPID();
        if (userMSPID!=='investorMSP' && userMSPID!=='spvMSP' && userMSPID!=='ratingagencyMSP'){
            throw new Error(`Your organization ${userMSPID} is not allowed to perform this action`);
        }
        let isClient=await ctx.GetRole();
        console.log(`isClient: ${isClient}`);
        if (!isClient){
            throw new Error(`You are not allowed to perform this action`);
        }
        await ctx.SetMSPID(userMSPID);
        let par=ctx.stub.getFunctionAndParameters();
        let func = par.fcn;
        let params=par.params;
        for (let i=0;i<params.length;i++){
            if (params[i]===''){
                throw new Error('There is at least one empty parameter that should not be');
            }
        }

        switch(func){
            case 'AskOrder':
                if (ctx.mspid!=='investorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'AskMarketOrder':
                if (ctx.mspid!=='investorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'BidOrder':
                if (ctx.mspid!=='investorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'BidMarketOrder':
                if (ctx.mspid!=='investorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            // case 'Matching':
            //     if (ctx.mspid!=='investorMSP'){
            //         throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
            //     }else{
            //         return
            //     }
            case 'PoolBond':
                if (ctx.mspid!=='investorMSP' && ctx.mspid!=='spvMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'MatchingBid':
                if (ctx.mspid!=='investorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
            case 'MatchingAsk':
                if (ctx.mspid!=='investorMSP'){
                    throw new Error(`Your organization ${ctx.mspid} is not allowed to perform this action`);
                }else{
                    return
                }
        }
    }

    async afterTransaction(ctx){
        let event=await ctx.GetEventPayload();
        return event
    }


    // This function is expected to return just one value associated with the partialKey of the user Identity Number
    async _mygetStateByPartialCompositeKey(ctx, name, userID){
        const iterator=await ctx.stub.getStateByPartialCompositeKey(name,[userID]);
        let counter=0;
        let results;

        for await (const res of iterator) {
            results=JSON.parse(res.value.toString())
            counter=counter+1;
            }
        if (counter>1){
            throw new Error('Partial Key Uniqueness not provided. Something went wrong');
        }else if (counter===0){
            return true;
        }
        return results;
    }


    async _transferBond(ctx, userID,amount,keyFrom){
        const genericID=await ctx.stub.getTxID();

        const key1=await ctx.stub.createCompositeKey('BondToken',[userID,genericID]);

        for (const key of keyFrom) {
            await ctx.stub.deleteState(key);
        }

        let typeID=':0'
        const bondToken={
            ID: key1+typeID,
            GenericID: genericID,
            Rating: "",
            CouponRate: "",
            MaturityDate: "",
            Issuer: "",
            Owner: userID,
            Pool: "",
            AmountPaid: "",
            OriginalValue: "",
            MonthlyPayout: "",
            RemainingPayments: "",
            Amount: amount,
            TypeID: typeID,
            CanBeUsed: true
        };

        const bondTokenBuffer=Buffer.from(JSON.stringify(bondToken));
        await ctx.stub.putState(key1,bondTokenBuffer);
        return bondToken
    }


    async PoolBond(ctx){
        const userID= await ctx.GetUserIdentity('cif')
        const iterator=await ctx.stub.getStateByPartialCompositeKey('BondToken',[userID]);
        let amount;
        let resultKeys=[];
        let counter=0;
        let value;
        console.log('before for await')
        for await (const res of iterator) {
            value = JSON.parse(res.value.toString());
            amount=value.Amount;
            if (value.CanBeUsed){
                resultKeys.push(value.ID);
                counter=counter+amount;
            }
            if (resultKeys.length===2){
                break
            }
        }
        console.log('after for await')
        if (resultKeys.length === 0 || resultKeys.length===1){
            throw new Error('There is nothing left to do');
            // return
        }
        let ret=await this._transferBond(ctx,userID, counter, resultKeys)
        return ret
    }


    // Our token will have 2 decimals, like fiat currencies
    async _checkDecimals(number){
        // In nodejs every atribute is passed as a string
        // First check if it is a number
        // number.stringify()
        // if(typeof number !=='number'){
        //     throw new Error('Wrong notation');
        // }
        // Not necessary, we are working with 2decimal-numbers
        // Integer between -2^53-1 and 2^53-1
        // if (!Number.isSafeInteger(number)){
        //     throw new Error('Wrong number');
        // }
        // Check if it is a 2decimal-number
        const numberString=number.toString();
        let index;
        let count=0;
        for(let i=0;i<numberString.length;i++){
            if (numberString[i]==='.'){
                index=i;
                count=count+1;
            }
            if (numberString[i]===','){
                throw new Error('Wrong format. Try using dot instead of comma')
            }
        }
        console.log(`numero de puntos ${count}`);
        if ((numberString.length-1-index)>2 || count>1){
            throw new Error('Wrong decimals')
        }
        // Check if it is strictly positive
        number=parseFloat(number);
        if (number<=0){
            throw new Error('Number must be strictly positive');
        }

        return true
    }





    // Bid order will be executed by someone able to buy assets (bonds)

    // Auxiliary function to allocate certain amount of money every time a bid order is submitted
    async _splitMoney(ctx,tokenID, amount){
        const userID= await ctx.GetUserIdentity('cif');
        const tokenBytes=await ctx.stub.getState(tokenID);
        if (!tokenBytes || tokenBytes.length === 0) {
            throw new Error(`Error, Token state according to key ${tokenID} does not exist`);
        }
        const token=JSON.parse(tokenBytes.toString());

        if (token.CanBeUsed===false){
            throw new Error(`This token ID ${tokenID} has already been used. Try another Token ID`)
        }

        console.log(`amount: ${amount}`);
        console.log(`token.Amount: ${token.Amount}`);
        console.log(token.Amount-amount);
        if (token.Amount<amount){
            throw new Error('Error, token State has not enough funds');
        }

        const balance=token.Amount-amount;

        const genericID=await ctx.stub.getTxID();
        const key1=await ctx.stub.createCompositeKey('securitizationCoin',[userID,genericID])
        const key2=await ctx.stub.createCompositeKey('securitizationCoin',[userID,genericID])

        let typeID;
        typeID=':1'
        const utxo1={
            ID: key1+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: token.Owner,
            Issuer: token.Issuer,
            Amount: balance,
            CanBeUsed: true
        };
        typeID=':0';
        const utxo2={
            ID: key2+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: token.Owner,
            Issuer: token.Issuer,
            Amount: amount,
            CanBeUsed: false
        };

        await ctx.stub.deleteState(token.ID);
        await ctx.stub.putState(utxo2.ID,Buffer.from(JSON.stringify(utxo2)));
        if (balance>0){
            await ctx.stub.putState(utxo1.ID,Buffer.from(JSON.stringify(utxo1)));
        }
        console.log(utxo2.ID)
        return utxo2.ID
    }

    // Auxiliary function to allocate certain amount of bonds every time an ask order is submitted
    async _splitBonds(ctx, bondID, amount){
        const userID= await ctx.GetUserIdentity('cif');
        const bondBytes=await ctx.stub.getState(bondID);
        if (!bondBytes || bondBytes.length === 0){
            throw new Error(`Error, Bond State according to key ${bondID} does not exist`);
        }
        const bond=await JSON.parse(bondBytes.toString());

        if (!bond.CanBeUsed){
            throw new Error(`This Bond State with ID ${bondID} has already been used in a prior order`);
        }
        if (amount>bond.Amount){
            throw new Error(`This Bond State has not enough bonds to transfer`);
        }

        const balance=bond.Amount-amount;

        const genericID=ctx.stub.getTxID();
        const key1=await ctx.stub.createCompositeKey('BondToken',[bond.Owner,genericID]);
        let typeID;
        typeID=':0'
        bondID=key1+typeID;

        const bond1={
            ID: bondID,
            GenericID: genericID,
            TypeID: typeID,
            Rating: bond.Rating,
            CouponRate: bond.CouponRate,
            MaturityDate: bond.MaturityDate,
            Issuer: bond.Issuer,
            Owner: bond.Owner,
            Pool: bond.Pool,
            AmountPaid: bond.AmountPaid,
            OriginalValue: bond.OriginalValue,
            MonthlyPayout: bond.MonthlyPayout,
            RemainingPayments: bond.RemainingPayments,
            Amount: amount,
            CanBeUsed: false
        };

        if(balance!==0){
            const key2=await ctx.stub.createCompositeKey('BondToken',[userID,genericID])
            typeID=':1';
            bondID=key2+typeID;
            const bond2={
                ID: bondID,
                GenericID: genericID,
                TypeID: typeID,
                Rating: bond.Rating,
                CouponRate: bond.CouponRate,
                MaturityDate: bond.MaturityDate,
                Issuer: bond.Issuer,
                Owner: userID,
                Pool: bond.Pool,
                AmountPaid: bond.AmountPaid,
                OriginalValue: bond.OriginalValue,
                MonthlyPayout: bond.MonthlyPayout,
                RemainingPayments: bond.RemainingPayments,
                Amount: balance,
                CanBeUsed: true
            };
            await ctx.stub.deleteState(bond.ID);
            await ctx.stub.putState(bondID,Buffer.from(JSON.stringify(bond1)));
            await ctx.stub.putState(bondID,Buffer.from(JSON.stringify(bond2)));
        }else{
            await ctx.stub.deleteState(bond.ID);
            await ctx.stub.putState(bondID,Buffer.from(JSON.stringify(bond1)));
        }
        return bond1.ID
    }

    // Auxiliary function to sort bid orders according to price, if they are limit or market orders and time they were
    // submitted
    async _sortingBidOrders(ctx, orderArray){
        await orderArray.sort((a,b) => (a.MarketPrice && !a.FullMatch && !b.FullMatch && b.MarketPrice && a.Time<b.Time) ? 1 : (a.MarketPrice && !a.FullMatch && !b.FullMatch && b.MarketPrice && a.Time>b.Time)? -1: 0);
        await orderArray.sort((b,a) => (a.Price > b.Price) ? 1 : ((b.Price > a.Price) ? -1 : (a.Time<b.Time) ? 1 : -1));
        await orderArray.sort((a,b) => (!a.FullMatch && b.FullMatch) ? -1 :(!b.FullMatch && a.FullMatch ? -1 : 1));
        return orderArray
    }

    // Auxiliary function to sort ask orders according to price, if they are limit or market orders and time they were
    // submitted
    async  _sortingAskOrders(ctx, orderArray){
        await orderArray.sort((a,b) => (a.MarketPrice && !a.FullMatch && !b.FullMatch && b.MarketPrice && a.Time<b.Time) ? 1 : (a.MarketPrice && !a.FullMatch && !b.FullMatch && b.MarketPrice && a.Time>b.Time)? -1: 0);
        await orderArray.sort((b,a) => (a.Price > b.Price) ? -1 : ((b.Price > a.Price) ? 1 : (b.Time>a.Time) ? 1 : -1));
        await orderArray.sort((a,b) => (!a.FullMatch && b.FullMatch) ? -1 :(!b.FullMatch && a.FullMatch ? -1 : 1));
        return orderArray
    }

    // We must add last market price attribute to order book in order to establish e fair price if there are no asks 
    // or bids in the order book
    // 

    // Transference triggered due to an Ask Order
    async _transferCashTokens(ctx,bidInputs,total,amountperUTXO, bondID,myOffer, howManyBonds,orderBook){
        //translate into nodejs utxo sample code 
        let userID=await ctx.clientIdentity.getID();
        let usedKeys=[];
        let amount=0;
        let token;
        let bondTokenBytes=await ctx.stub.getState(bondID);
        if(!bondTokenBytes || bondTokenBytes.length === 0){
            throw new Error('Error')
        }
        let bondToken=JSON.parse(bondTokenBytes.toString());
        let transactionID=await ctx.stub.getTxID();
        let outputBondToken={
            ID: '',
            GenericID: transactionID,
            TypeID: ':0',
            Rating: bondToken.Rating,
            CouponRate: bondToken.CouponRate,
            MaturityDate: bondToken.MaturityDate,
            Issuer: bondToken.Issuer,
            Owner: bondToken.Owner,
            Pool: bondToken.Pool,
            AmountPaid: bondToken.AmountPaid,
            OriginalValue: bondToken.OriginalValue,
            MonthlyPayout: bondToken.MonthlyPayout,
            RemainingPayments: bondToken.RemainingPayments,
            Amount: bondToken.Amount,
            CanBeUsed: true
        }
    
        let asks=orderBook[1];
        let bids=orderBook[0];
    
        for (let i=0; i<bidInputs.length;i++){
            let cashTokenID=bidInputs[i].TokenID;
            let quantityToTransfer=bidInputs[i].QuantityMatch;
            if(usedKeys.indexOf(cashTokenID)!==-1){
                throw new Error('Error')
            }
    
            let utxoInputCompositeKey=await ctx.stub.createCompositeKey('securitizationCoin', [userID, utxoInputKeys[i]]);
            //TODO
            //check errors
            
            let valueBytes=await ctx.stub.getState(utxoInputCompositeKey);
            //TODO
            //check errors
             
            
            // Error handling not needed since Itoa() was used when setting the utxo amount, guaranteeing it was an integer.

            token=JSON.parse(valueBytes.toString());

            outputBondToken.Owner=token.Owner;
            outputBondToken.ID=await ctx.stub.createCompositeKey('BondToken',[token.Owner,outputBondToken.GenericID]);
            outputBondToken.Amount=quantityToTransfer*bidInputs[i].Price;
            amount+=token.Quantity;
            if(token.Quantity<amountperUTXO[i]){
                throw new Error('Error')
            }
            
            let lastOwner=token.Owner;
            // let lastQuantity=token.Quantity;
            // let lastBalance=
            usedKeys.append(token.ID);
            if (bidInputs[i].FullMatch){
                await ctx.stub.deleteState(token.ID)
                let myBid=await bids.filter(item=> item.ID!==bidInputs[i].ID);
                orderBook=[myBid,asks]
            }else{
                let myBid=await bids.filter(item=> item.ID);
                index = bids.indexOf(myBid[0]);
                myBid[0].TokenID=token.ID;
                myBid[0].RestingQuantity=myBid[0].RestingQuantity-orders.QuantityMatch;
                await ctx.stub.deleteState(token.ID);
            }
    
            // await ctx.stub.deleteState(token.ID)
        }
        if(amount<total){
            throw new Error('Error')
        }

        // const securitizationCoin= {
        //     ID: key+ typeID,
        //     GenericID: genericID,
        //     TypeID: typeID,
        //     Issuer: await ctx.clientIdentity.getID(),
        //     Owner: userID,
        //     Amount: parseInt(parseFloat(amount)*100),
        //     Factor: 100,
        //     CanBeUsed: true
        // };
        let securitizationCoin1={
            ID: key+ typeID,
            GenericID: transactionID,
            TypeID: typeID,
            Issuer: await ctx.clientIdentity.getID(),
            Owner: userID,
            Amount: total,
            Factor: 100,
            CanBeUsed: true
        }
        let valueBuffer1=Buffer.from(JSON.stringify(securitizationCoin1))
        let restingQuantity=amount-total;
        if(restingQuantity!==0){
            let securitizationCoin2={
                ID: key+ typeID,
                GenericID: transactionID,
                TypeID: typeID,
                Issuer: await ctx.clientIdentity.getID(),
                Owner: lastOwner,
                Amount: restingQuantity,
                Factor: 100,
                CanBeUsed: true
            }
            let valueBuffer2=Buffer.from(JSON.stringify(secutizationCoin2));
            await ctx.stub.putState(securitizationCoin2.ID, valueBuffer2);
            await ctx.stub.putState(securitizationCoin1.ID,valueBuffer1);
        }else{
            // create just one state
            await ctx.stub.putState(securitizationCoin1.ID, valueBuffer1)
        }
    }

    //Transference triggered due to a Bid Order
    async _transferBondTokens(ctx,askInputs,bidInput, orderBook){
        // I retrieve cash token
        let securitizationCoinBytes=await ctx.stub.getState(bidInput.TokenID);
        if(!securitizationCoinBytes || securitizationCoinBytes.length === 0){
            throw new Error('Error')
        }
        let securitizationCoin=JSON.parse(securitizationCoinBytes.toString());

        let myFunds=securitizationCoin.Quantity;
        //translate into nodejs utxo sample code 
        let userID=await ctx.clientIdentity.getID();
        let usedKeys=[];
        let usedOwners=[];
        let usedAmounts=[];
        let amount=0;
        let token;
        // let coupons;
        // check all bonds are equal (same coupons)
        let transactionID=await ctx.stub.getTxID();

        let outputSecuritizationCoin={
            ID: '',
            GenericID: transactionID,
            TypeID: ':0',
            Issuer: await ctx.clientIdentity.getID(),
            Owner: '',
            Amount: '',
            Factor: 100,
            CanBeUsed: true
        }
        let asks=orderBook[1];
        let bids=orderBook[0];
        
        for (let i=0; i<askInputs.length;i++){
            let bondID=askInputs[i].TokenID;
            let quantityToTransfer=askInputs[i].QuantityMatch;
            if(usedKeys.indexOf(bondID)!==-1){
                throw new Error('Error')
            }
            // let utxoInputCompositeKey=await ctx.stub.createCompositeKey('securitizationCoin', [userID, utxoInputKeys[i]]);
            //TODO
            //check errors
            
            let valueBytes=await ctx.stub.getState(bondID);
            //TODO
            //check errors
                
            
            // Error handling not needed since Itoa() was used when setting the utxo amount, guaranteeing it was an integer.

            token=JSON.parse(valueBytes.toString());
            let bondOwner=token.Owner;

            if (usedOwners.indexOf(bondOwner)===-1){
                usedOwners.append(bondOwner);
                usedAmounts.append(quantityToTransfer);
            }else{
                usedAmounts[indexOf(bondOwner)]+=quantityToTransfer;
            }


            amount+=token.Amount;
            //revisar
            if(token.Amount<quantityToTransfer){
                throw new Error('Error')
            }
            //TODO
            // check coupons received
            outputSecuritizationCoin.ID=await ctx.stub.createCompositeKey('securitizationCoin',[token.Owner,outputSecuritizationCoin.GenericID]);
            outputSecuritizationCoin.Quantity=quantityToTransfer*askInputs[i].Price
            // cashperBond[i]*amountperBond[i];
            outputSecuritizationCoin.Owner=token.Owner;
            
            let outputSecuritizationCoinBuffer= Buffer.from(JSON.stringify(outputSecuritizationCoin))
            await ctx.stub.putState(outputSecuritizationCoin.ID,outputSecuritizationCoinBuffer)
            let lastOwner=token.Owner;
            // let lastQuantity=token.Quantity;
            // let lastBalance=
            usedKeys.append(token.ID);
            if (askInputs[i].FullMatch){
                await ctx.stub.deleteState(token.ID)
                let myAsk=await asks.filter(item=> item.ID!==askInputs[i].ID);
                orderBook=[bids,myAsk]
            }else{
                let myAsk=await asks.filter(item=> item.ID);
                index = asks.indexOf(myAsk[0]);
                myAsk[0].TokenID=tokenID;
                myAsk[0].RestingQuantity=myAsk[0].RestingQuantity-orders.QuantityMatch;
                await ctx.stub.deleteState(token.ID);
            }
        }
        // await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(orderBook)));
        if(amount<total){
            throw new Error('Error')
        }

        let bondToken1={
            ID: await ctx.stub.createCompositeKey('BondToken',[]),
            GenericID: transactionID,
            TypeID: ':0',
            Rating: token.Rating,
            CouponRate: token.CouponRate,
            MaturityDate: token.MaturityDate,
            Issuer: securitizationCoin.Owner,
            Owner: securitizationCoin.Owner,
            Pool: token.Pool,
            AmountPaid: token.AmountPaid,
            OriginalValue: token.OriginalValue,
            MonthlyPayout: token.MonthlyPayout,
            RemainingPayments: token.RemainingPayments,
            Amount: amount,
            CanBeUsed: true
        }
        let valueBuffer1=Buffer.from(JSON.stringify(bondToken1))
        let restingQuantity=amount-total;
        if(restingQuantity!==0){
            let bondToken2={
                ID: '',
                GenericID: transactionID,
                TypeID: ':1',
                Rating: token.Rating,
                CouponRate: token.CouponRate,
                MaturityDate: token.MaturityDate,
                Issuer: securitizationCoin.Issuer,
                Owner: securitizationCoin.Owner,
                Pool: token.Pool,
                AmountPaid: token.AmountPaid,
                OriginalValue: token.OriginalValue,
                MonthlyPayout: token.MonthlyPayout,
                RemainingPayments: token.RemainingPayments,
                Amount: restingQuantity,
                CanBeUsed: true
            }
            let valueBuffer2=Buffer.from(JSON.stringify(bondToken2));
            await ctx.stub.putState(bondToken2.ID, valueBuffer2);
            await ctx.stub.putState(bondToken1.ID,valueBuffer1);
        }else{
            // create just one state
            await ctx.stub.putState(bondToken1.ID, valueBuffer1)
        }
    
    }

    // Bid order will be executed by someone whose desire is buying bonds.
    async BidOrder(ctx, amount, price,tokenID,identificativo,date){
        console.log('paso 1')
        // first we check the format of price
        await this._checkDecimals(price);
        price=parseFloat(price);
        price=parseInt(price*100);
        // if (amount<=0 || price<=0){
        //     throw new Error(`Both Amount and Price arguments must be positive`);
        // }
        const userID= await ctx.GetUserIdentity('cif');

        // retrieve order book if it exists
        const bookOrderBytes=await ctx.stub.getState('OrderBook');
        let bookOrder;
        if (!bookOrderBytes || bookOrderBytes.length === 0){
            bookOrder=[[],[]];
        }else{
            bookOrder=JSON.parse(bookOrderBytes.toString());
        }

        // retrieve token we are going to use to pay for
        let myKey=await ctx.stub.createCompositeKey('securitizationCoin',[userID,tokenID]);
        myKey=myKey+identificativo;
        const tokenBytes=await ctx.stub.getState(myKey);

        console.log('paso 2')
        // prior verifications are also inside auxiliary function
        if (!tokenBytes || tokenBytes.length === 0){
            throw new Error(`Error, Token State according to key ${tokenID} does not exist`);
        }
        const token= JSON.parse(tokenBytes.toString());
        if (!token.CanBeUsed){
            throw new Error(`This Token State with ID ${tokenID} has already been used. Try another Token ID`);
        }
        const genericID=await ctx.stub.getTxID();
        const orderID=await ctx.stub.createCompositeKey('BidOrder',[genericID]);

        // compute how many tokens we will withdraw from our Token State
        const total=amount*price;

        let currentOrder={
            ID: orderID,
            Quantity: parseInt(amount),
            Price: price,
            TokenID: token.ID,
            FullMatch: false,
            MarketPrice: false,
            PartialMatch: false,
            QuantityMatch: 0,
            RestingQuantity: parseInt(amount),
            // MatchID:[],
            Name: 'Bid',
            Time: new Date(date).getTime()
        }

        console.log('tiempo dentro del sc')
        console.log(currentOrder.Time)

        let asks=bookOrder[1];
        let bids=bookOrder[0];
        console.log(asks)
        console.log('paso 3')
        // If there  is no asks it means we cannot match our bid order
        if ( asks.length===0){
            console.log('paso 3.1')
            let newID=await this._splitMoney(ctx,token.ID,total);
            const order={
                ID: orderID,
                Quantity: parseInt(amount),
                Price: price,
                TokenID: newID,
                Name: 'Bid',
                FullMatch: false,
                MarketPrice: false,
                PartialMatch: false,
                QuantityMatch: 0,
                RestingQuantity: parseInt(amount),
                // MatchID:[],
                Time: new Date(date).getTime()
            };
            bookOrder[0].push(order);

            const book=await this._sortingBidOrders(ctx,bookOrder[0]);
            bookOrder=[book,bookOrder[1]];
            await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(bookOrder)));
            return bookOrder
        }

        console.log('paso 4')

        let bidReference=currentOrder;

        let bondKeyAcumulator=[];
        let tokenAcumulator=[];
        let counter=bidReference.Quantity;
        let balance=0;
        let totalTokens=0;
        let tokensCounter=token.Amount;
        let balanceTokens=0;
        console.log('paso 5')
        console.log(bidReference.Price)
        // check if there is matching
        for await (const ask of asks) {
            console.log('controlando el break')
            console.log(ask.Price);
            if (ask.Price<=bidReference.Price && !ask.FullMatch ){
                console.log('paso 5.1')
                counter=counter-ask.Quantity;
                balance=ask.Quantity+counter;
                tokensCounter=tokensCounter-(ask.Quantity*ask.Price);
                balanceTokens=(ask.Quantity*ask.Price)+tokensCounter;
                console.log('tokensCounter')
                console.log(tokensCounter)
                if (tokensCounter<=0){
                    console.log('paso 5.1.1')
                    console.log(balanceTokens)
                    console.log(ask.Price)

                    let amountSol= balance;
                    console.log(amountSol)
                    ask.QuantityMatch=amountSol;
                    ask.Quantity=ask.Quantity-amountSol;
                    ask.FullMatch=true;
                    ask.PartialMatch=false;
                    // ask.MatchID.push(bidReference.ID);
                    // bidReference.MatchID.push(ask.TokenID);
                    tokenAcumulator.push(ask);
                    bondKeyAcumulator.push(ask.TokenID);
                    totalTokens=totalTokens+(ask.Price*amountSol);
                    // bidReference.MatchID.push(ask.TokenID);
                    bondKeyAcumulator.push(ask.TokenID);
                    // tokenAcumulator.push(ask);
                    totalTokens=totalTokens+(ask.Price*ask.QuantityMatch);
                    counter=0;
                    break
                }else{
                    console.log('paso 5.1.2')
                    // FULL MATCH means that our submitted order with that size has been completed
                    if (counter>=0){
                        console.log('paso 5.1.2.1')
                        // FULL MATCH
                        ask.QuantityMatch=ask.Quantity;
                        ask.FullMatch=true;
                        ask.PartialMatch=false;
                        // ask.MatchID.push(bidReference.ID);
                        // bidReference.MatchID.push(ask.TokenID);
                        tokenAcumulator.push(ask);
                        bondKeyAcumulator.push(ask.TokenID);
                        totalTokens=totalTokens+(ask.Price*ask.QuantityMatch);
                    }else{ 
                    // else if(counter<0 && balance>0){
                        console.log('paso 5.1.2.2')
                        // PARTIAL MATCH means that our submitted order with that size has been completed partially
                        // PARTIAL MATCH
                        ask.FullMatch=false;
                        ask.PartialMatch=true;
                        ask.QuantityMatch=balance;
                        ask.Quantity=ask.Quantity-balance;
                        // ask.MatchID.push(bidReference.ID);
                        // bidReference.MatchID.push(ask.TokenID);
                        bondKeyAcumulator.push(ask.TokenID);
                        tokenAcumulator.push(ask);
                        totalTokens=totalTokens+(ask.Price*ask.QuantityMatch);
                        counter=0;
                        // And finally break, because we read following a prestablished order
                        console.log('antes del break')
                        break
                    }
                }
            }else{
                continue
            }
        }
        console.log('paso 6')
        // if (totalTokens>token.Amount){
        //     throw new Error(`Your Token State with ID ${tokenID} do not have enough funds`);
        // }

        console.log('paso 7')
        // now we upload our order and the matching state
        let newID=await this._splitMoney(ctx,token.ID,total);
        if (counter===0){
            console.log('paso 7.1')
            // Full Match
            currentOrder.ID=orderID
            currentOrder.TokenID=newID;
            currentOrder.FullMatch=true;
            currentOrder.PartialMatch= false;
            currentOrder.QuantityMatch=currentOrder.Quantity;
            // currentOrder.MatchID=bidReference.MatchID;
        }else if(counter!==0 && counter!==bidReference.Quantity){
            console.log('paso 7.2')
           // Partial Match
            currentOrder.ID=orderID
            currentOrder.TokenID=newID;
            currentOrder.FullMatch=false;
            currentOrder.PartialMatch= true;
            currentOrder.QuantityMatch=bidReference.Quantity-counter;
            currentOrder.Quantity=counter;
            // currentOrder.MatchID=bidReference.MatchID;
        }else{
            console.log('paso 7.3')
            // No match
            currentOrder.ID=orderID
            currentOrder.TokenID=newID;
            currentOrder.FullMatch=false;
            currentOrder.PartialMatch=false;
        }
        bookOrder[0].push(currentOrder);
        console.log(bookOrder);


        const bookBid=await this._sortingBidOrders(ctx,bookOrder[0]);
        const bookAsk=await this._sortingAskOrders(ctx,bookOrder[1])
        bookOrder=[bookBid,bookAsk];
        console.log('paso 8')
        console.log(bookOrder)
        // Finally we submit order book and matching state
        await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(bookOrder)));
        if (bondKeyAcumulator.length>0){
            console.log('paso 8.1')
            const orderMatch={
                Orders: tokenAcumulator,
                Order: currentOrder,
            }
            let orderBuffer=Buffer.from(JSON.stringify(orderMatch));
            await ctx.stub.putState('OrderMatch'+genericID, orderBuffer);
            await ctx.SetEventName('BidMatched');
            await ctx.SetEventPayload(orderBuffer);
            // transference triggered
            // cash tokens goes from bid uploader to bond owners and bonds
            // goes to bid order uploader

            // let ITransferCashTokenID=currentOrder.TokenID;
            await this._transferCashTokens(ctx,tokenAcumulator,currentOrder)
            console.log(orderMatch)
            console.log(orderMatch.Orders)
            console.log(orderMatch.Order)
        }
        console.log('paso 9')
        return bookOrder

    }

    // We must add last market price attribute to order book in order to establish e fair price if there are no asks 
    // or bids in the order book
    // AskOrder  will be executed by someone able to sell assets at a limit price
    async AskOrder(ctx,amount,price,bondID,identificativo,date){
        await this._checkDecimals(price);
        const userID=await ctx.GetUserIdentity('cif');
        amount=parseInt(amount);
        price=parseFloat(price);
        price=parseInt(price*100);
        let myKey=await ctx.stub.createCompositeKey('BondToken',[userID,bondID]);
        myKey=myKey+identificativo
        const bondBytes=await ctx.stub.getState(myKey);

        // These prior verifications are also inside auxiliary function
        if (!bondBytes || bondBytes.length === 0){
            throw new Error(`Error, Bond State with ID ${bondID} does not exist`);
        }
        const bond=JSON.parse(bondBytes.toString());
        if (!bond.CanBeUsed){
            throw new Error(`This Bond State with ID ${bondID} has already been used. Try another Bond ID`);
        }
        if (bond.Amount<amount){
            throw new Error(`You are not supposed to do that.`);
        }
        const bookOrderBytes=await ctx.stub.getState('OrderBook');
        let bookOrder;
        if (!bookOrderBytes || bookOrderBytes.length === 0){
            bookOrder=[[],[]];
        }else{
            bookOrder=JSON.parse(bookOrderBytes.toString());
        }

        const genericID=await ctx.stub.getTxID();
        const orderID=await ctx.stub.createCompositeKey('AskOrder',[genericID]);
        let currentOrder={
            ID: orderID,
            Quantity: parseInt(amount),
            Price: price,
            TokenID: bond.ID,
            FullMatch: false,
            MarketPrice: false,
            PartialMatch: false,
            QuantityMatch: 0,
            RestingQuantity: parseInt(amount),
            // MatchID:[],
            Name: 'Ask',
            Time: new Date(date).getTime()
        };

        let asks=bookOrder[1];
        let bids=bookOrder[0];

        // If there is no bids it means we cannot match our ask order so we just submit it
        if (bids.length===0){
            let newID=await this._splitBonds(ctx,bond.ID,amount);
            console.log(newID)
            const order={
                ID: orderID,
                Quantity: parseInt(amount),
                Price: price,
                TokenID: newID,
                FullMatch: false,
                MarketPrice: false,
                PartialMatch: false,
                QuantityMatch: 0,
                RestingQuantity: parseInt(amount),
                // MatchID:[],
                Name: 'Ask',
                Time: new Date(date).getTime()
            };
            console.log(order);
            bookOrder[1].push(order);

            let book=await this._sortingAskOrders(ctx,bookOrder[1]);
            console.log(book)
            bookOrder=[bookOrder[0],book];
            await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(bookOrder)));
            // console.log(ret)
            return bookOrder
        }

        const askReference=currentOrder;
        let tokenKeyAcumulator=[];
        let tokenAcumulator=[];
        let tokenQuantitiesAcumulator=[];
        let counter=askReference.Quantity;
        let totalTokens=0;
        let balance=0;
        // Check if our order can be matched
        for await (const bid of bids) {
            if (bid.Price>=askReference.Price && !bid.FullMatch){
                counter=counter-bid.Quantity;
                balance=bid.Quantity+counter;
                if (counter>=0 ){
                    bid.FullMatch=true;
                    bid.PartialMatch=false;
                    bid.QuantityMatch=bid.Quantity;
                    // bid.MatchID.push(askReference.ID);
                    // askReference.MatchID.push(bid.ID);
                    tokenKeyAcumulator.push(bid.ID);
                    tokenAcumulator.push(bid);
                    tokenQuantitiesAcumulator.push(bid.Quantity);
                    totalTokens=totalTokens+(bid.Price*bid.QuantityMatch);
                // } else if(counter<0 && balance>0){
                } else{
                    bid.FullMatch=false;
                    bid.PartialMatch=true;
                    bid.QuantityMatch=balance;
                    bid.Quantity=bid.Quantity-balance;
                    // bid.MatchID.push(askReference.ID);
                    // askReference.MatchID.push(bid.ID);
                    tokenKeyAcumulator.push(bid.ID);
                    tokenAcumulator.push(bid);
                    tokenQuantitiesAcumulator.push(counter+bid.Quantity);
                    totalTokens=totalTokens+(bid.Price*bid.QuantityMatch);
                    counter=0;
                    break
                }
                // else{
                //     continue
                // }
            }
        }

        let newID=await this._splitBonds(ctx,bond.ID,amount);
        console.log(newID)
        console.log(counter)
        // According to what matching situation we are, differents orders will be submitted
        if (counter===0){
            // Full Match
            console.log('case FULLMATCH')
            currentOrder.TokenID=newID;
            currentOrder.FullMatch=true;
            currentOrder.PartialMatch= false;
            currentOrder.QuantityMatch=currentOrder.Quantity;
            // currentOrder.MatchID=askReference.MatchID;
        }else if(counter!==0 && counter!==askReference.Quantity ){
            // Partial Match
            console.log('PARTIALMATCH')
            currentOrder.TokenID=newID;
            currentOrder.FullMatch=false;
            currentOrder.PartialMatch= true;
            currentOrder.QuantityMatch=askReference.Quantity-counter;
            currentOrder.Quantity=counter;
            // currentOrder.MatchID=askReference.MatchID;
        }else{
            // No match
            console.log('NOMATCH')
            currentOrder.TokenID=newID;
            currentOrder.FullMatch=false;
            currentOrder.PartialMatch= false;
        }
        bookOrder[1].push(currentOrder);
        console.log(bookOrder)

        // Sort order book according to prior rules
        let bookAsk=await this._sortingAskOrders(ctx,bookOrder[1]);
        let bookBid=await this._sortingBidOrders(ctx,bookOrder[0]);
        bookOrder=[bookBid,bookAsk];
        await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(bookOrder)));

        console.log(tokenKeyAcumulator)
        if (tokenKeyAcumulator.length>0){
            console.log('Hay match')
            const orderMatch={
                Orders: tokenAcumulator,
                Order: currentOrder,
            }
            let orderBuffer=Buffer.from(JSON.stringify(orderMatch));
            await ctx.stub.putState('OrderMatch'+genericID, orderBuffer);
            // finally we set an event saying that our order has been matched and with which orders
            await ctx.SetEventName('AskMatched');
            await ctx.SetEventPayload(orderBuffer);
        }
        return bookOrder
    }

    // We must add last market price attribute to order book in order to establish e fair price if there are no asks 
    // or bids in the order book
    // AskMarketOrder will be executed by someone whose desire is selling bonds at market price.
    async AskMarketOrder(ctx,amount,bondID,identificativo,date){
        amount=parseInt(amount);
        if (amount<=0){
            throw new Error(`Amount argument must be positive`);
        }
        const userID= await ctx.GetUserIdentity('cif');

        let myKey=await ctx.stub.createCompositeKey('BondToken',[userID,bondID]);
        myKey=myKey+identificativo
        const bondBytes=await ctx.stub.getState(myKey);
        if (!bondBytes || bondBytes.length === 0){
            throw new Error(`Error, Bond State with key ${bondID} does not exist`);
        }

        // These prior verifications are also inside auxiliary function.
        const bond=JSON.parse(bondBytes.toString());
        if (!bond.CanBeUsed){
            throw new Error(`This Bond State with ID ${bondID} has already been used. Try another bond ID`);
        }
        if (bond.Amount<amount){
            throw new Error(`Your token has not enough funds`);
        }
        // retrieve order book if it exists
        const bookOrderBytes=await ctx.stub.getState('OrderBook');
        let bookOrder;
        if (!bookOrderBytes || bookOrderBytes.length === 0){
            throw new Error(`Order Book still not submitted`)
        }else{
            bookOrder=JSON.parse(bookOrderBytes.toString());
        }
        // console.log('Order book')
        // console.log(bookOrder)
        const genericID=await ctx.stub.getTxID();

        const orderID=await ctx.stub.createCompositeKey('AskOrder',[genericID]);
        let currentOrder={
            ID: orderID,
            Quantity: amount,
            Price: '',
            MarketPrice: true,
            TokenID: bond.ID,
            FullMatch: false,
            PartialMatch: false,
            QuantityMatch: 0,
            RestingQuantity: amount,
            // MatchID:[],
            Name: 'Ask',
            Time: new Date(date).getTime()
        };

        let asks=bookOrder[1];
        let bids=bookOrder[0];
        // If there is no bids it means we cannot match our ask order

        // if (bids.length===0){
        //     // For sake of simplicity if there are no asks you cannot submit
        //     // a market order
        //     throw new Error(`There are no asks submitted.`)
        // }

        const askReference=currentOrder;
        let tokenKeyAcumulator=[];
        let tokenAcumulator=[];
        let tokenQuantitiesAcumulator=[];
        let counter=askReference.Quantity;
        let totalTokens=0;
        let balance=0;
        console.log('askReference.Quantity')
        console.log(askReference.Quantity)
        // Check if there is matching
        for await (const bid of bids) {
            if (!bid.FullMatch){
                console.log('Paso 1')
                counter=counter-bid.Quantity;
                balance=bid.Quantity+counter;
                if (counter>=0){
                    console.log('Paso 2')
                    bid.FullMatch=true;
                    bid.PartialMatch=false;
                    bid.QuantityMatch=bid.Quantity;
                    // bid.MatchID.push(askReference.ID);
                    // askReference.MatchID.push(bid.ID);
                    tokenKeyAcumulator.push(bid.ID);
                    tokenAcumulator.push(bid);
                    tokenQuantitiesAcumulator.push(bid.Quantity);
                    totalTokens=totalTokens+(bid.Price*bid.QuantityMatch);
                } else if(counter<0 && balance>0){
                    console.log('Paso 3')
                    bid.FullMatch=false;
                    bid.PartialMatch=true;
                    bid.QuantityMatch=balance;
                    bid.Quantity=bid.Quantity-balance;
                    // bid.MatchID.push(askReference.ID);
                    // askReference.MatchID.push(bid.ID);
                    tokenKeyAcumulator.push(bid.ID);
                    tokenAcumulator.push(bid);
                    tokenQuantitiesAcumulator.push(counter+bid.Quantity);
                    totalTokens=totalTokens+(bid.Price*bid.QuantityMatch);
                    counter=0;
                    break
                }else{
                    counter=0
                    break
                }
                // else{
                //     console.log('Paso 4')
                //     bid.FullMatch=true;
                //     bid.PartialMatch=false;
                //     bid.QuantityMatch=bid.Quantity;
                //     // bid.MatchID.push(askReference.ID);
                //     // askReference.MatchID.push(bid.ID);
                //     tokenKeyAcumulator.push(bid.ID);
                //     tokenAcumulator.push(bid);
                //     tokenQuantitiesAcumulator.push(bid.Quantity);
                //     totalTokens=totalTokens+(bid.Price*bid.QuantityMatch);
                //     break
                // }
            }else{
                continue
            }

        }

        let newID=await this._splitBonds(ctx,bond.ID,amount);

        // if (counter===0){
        //     // Full Match
        currentOrder.TokenID=newID;
        currentOrder.FullMatch=true;
        currentOrder.PartialMatch= false;
        currentOrder.QuantityMatch=askReference.Quantity-counter;
        //     // currentOrder.MatchID=askReference.MatchID;
        // }else if(counter!==0 && counter!==askReference.Quantity ){
        //    // Partial Match
        //     currentOrder.TokenID=newID;
        //     currentOrder.FullMatch=false;
        //     currentOrder.PartialMatch= true;
        //     currentOrder.QuantityMatch=askReference.Quantity-counter;
        //     currentOrder.Quantity=counter;
        //     // currentOrder.MatchID=askReference.MatchID;
        // }
        // else{
        //     // No match
        //     currentOrder.TokenID=newID;
        //     currentOrder.FullMatch=false;
        //     currentOrder.PartialMatch= false;
        // }


        bookOrder[1].push(currentOrder);

        let bookAsk=await this._sortingAskOrders(ctx,bookOrder[1]);
        let bookBid=await this._sortingBidOrders(ctx,bookOrder[0]);
        bookOrder=[bookBid,bookAsk];
        await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(bookOrder)))

        // if (tokenKeyAcumulator.length>0){
        const orderMatch={
            Orders: tokenAcumulator,
            Order: currentOrder,
        }
        let orderBuffer=Buffer.from(JSON.stringify(orderMatch));
        await ctx.stub.putState('OrderMatch'+genericID, orderBuffer);
        // finally we set an event saying that our order has been matched and with which orders
        await ctx.SetEventName('AskMatched');
        await ctx.SetEventPayload(orderBuffer);
        //     return bookOrder
        //     // console.log(orderMatch)
        // }
        // else{
        //     return bookOrder
        // }
        return bookOrder
    }

    // We must add last market price attribute to order book in order to establish e fair price if there are no asks 
    // or bids in the order book
    // BidMarketOrder will be executed by someone whose desire is buying bonds at market price.
    async BidMarketOrder(ctx, amount,tokenID,identificativo,date){
        if (amount<=0){
            throw new Error(`Amount argument must be positive`);
        }
        const userID= await ctx.GetUserIdentity('cif');

        // These prior verifications are also inside auxiliary function
        let myKey=await ctx.stub.createCompositeKey('securitizationCoin',[userID,tokenID]);
        myKey=myKey+identificativo;
        const tokenBytes=await ctx.stub.getState(myKey);
        if (!tokenBytes || tokenBytes.length === 0){
            throw new Error(`Error, Token State with ID ${tokenID} does not exist`);
        }
        const token= JSON.parse(tokenBytes.toString());
        if (!token.CanBeUsed){
            throw new Error(`This Token State with ID ${tokenID} has already been used. Try another token ID`);
        }
        

        const bookOrderBytes=await ctx.stub.getState('OrderBook');
        let bookOrder;
        if (!bookOrderBytes || bookOrderBytes.length === 0){
            throw new Error(`There are no asks submitted.`)
            // bookOrder=[[],[]];
        }else{
            bookOrder=JSON.parse(bookOrderBytes.toString());
        }


        const genericID=await ctx.stub.getTxID();
        const orderID=await ctx.stub.createCompositeKey('BidOrder',[genericID]);
        let currentOrder={
            ID: orderID,
            Quantity: parseInt(amount),
            Price: '',
            MarketPrice: true,
            TokenID: token.ID,
            FullMatch: false,
            PartialMatch: false,
            QuantityMatch: 0,
            RestingQuantity: parseInt(amount),
            // MatchID:[],
            Name: 'Bid',
            Time: new Date(date).getTime()
        }

        let asks=bookOrder[1];
        let bids=bookOrder[0];
        // If there  is no asks it means we cannot match our bid order, so it has no sense to commit a bid order
        // at market price
        // if ( asks.length===0){
        //     // For sake of simplicity if there are no asks you cannot submit
        //     // a market order
        //     throw new Error(`There are no asks submitted.`)
        // }

        let bidReference=currentOrder;

        let bondKeyAcumulator=[];
        let tokenAcumulator=[];
        let counter=bidReference.Quantity;
        let balance=0;
        let totalTokens=0;
        let tokensCounter=token.Amount;
        let balanceTokens=0;
        console.log('tokensCounter')
        console.log(tokensCounter)
        console.log(token)
        console.log('paso 1')
        for await (const ask of asks) {
            if (!ask.FullMatch ){
                console.log('paso 2')
                counter=counter-ask.Quantity;
                balance=ask.Quantity+counter;
                tokensCounter=tokensCounter-(ask.Quantity*ask.Price);
                balanceTokens=(ask.Quantity*ask.Price)+tokensCounter;
                if (tokensCounter<=0){
                    console.log('paso 3')
                    let amountSol= Math.floor(balanceTokens/ask.Price);
                    ask.QuantityMatch=amountSol;
                    ask.Quantity=ask.Quantity-amountSol;
                    ask.FullMatch=false;
                    ask.PartialMatch=true;
                    // ask.MatchID.push(bidReference.ID);
                    // bidReference.MatchID.push(ask.TokenID);
                    tokenAcumulator.push(ask);
                    bondKeyAcumulator.push(ask.TokenID);
                    totalTokens=totalTokens+(ask.Price*amountSol);
                    // bidReference.MatchID.push(ask.TokenID);
                    bondKeyAcumulator.push(ask.TokenID);
                    tokenAcumulator.push(ask);
                    totalTokens=totalTokens+(ask.Price*ask.QuantityMatch);
                    counter=0;
                    break
                }else{
                    console.log('paso 4')
                    if (counter>=0){
                        console.log('paso 4.1')
                        // FULL MATCH
                        ask.QuantityMatch=ask.Quantity;
                        ask.FullMatch=true;
                        ask.PartialMatch=false;
                        // ask.MatchID.push(bidReference.ID);
                        // bidReference.MatchID.push(ask.TokenID);
                        tokenAcumulator.push(ask);
                        bondKeyAcumulator.push(ask.TokenID);
                        totalTokens=totalTokens+(ask.Price*ask.QuantityMatch);
                    } else{
                    // else if(counter<0 && balance>0){
                        console.log('paso 4.2')
                        // Partial Match
                        ask.FullMatch=false;
                        ask.PartialMatch=true;
                        ask.QuantityMatch=balance;
                        ask.Quantity=ask.Quantity-balance;
                        // ask.MatchID.push(bidReference.ID);
                        // bidReference.MatchID.push(ask.TokenID);
                        bondKeyAcumulator.push(ask.TokenID);
                        tokenAcumulator.push(ask);
                        totalTokens=totalTokens+(ask.Price*ask.QuantityMatch);
                        counter=0;
                        break
                    }
                }
            }else{
                continue
            }
        }

        console.log('tokenAcumulator');
        console.log(tokenAcumulator);

        let newID=await this._splitMoney(ctx,token.ID,totalTokens);
        // if (counter===0){
        console.log('Full Match')
        // Full Match
        currentOrder.TokenID=newID;
        currentOrder.FullMatch=true;
        currentOrder.PartialMatch= false;
        // currentOrder.QuantityMatch=currentOrder.Quantity;
        currentOrder.QuantityMatch=bidReference.Quantity-counter;

            // currentOrder.MatchID=bidReference.MatchID;
        // }
        // else{ 
        // // if(counter!==0 && counter!==bidReference.Quantity){
        //     console.log('Partial Match')
        //    // Partial Match
        //     currentOrder.TokenID=newID;
        //     currentOrder.FullMatch=false;
        //     currentOrder.PartialMatch= true;
        //     currentOrder.QuantityMatch=bidReference.Quantity-counter;
        //     currentOrder.Quantity=counter;
        //     // currentOrder.MatchID=bidReference.MatchID;
        // }
        // else{
        //     console.log('No Match')
        //     // No match
        //     currentOrder.TokenID=newID;
        //     currentOrder.FullMatch=false;
        //     currentOrder.PartialMatch=false;
        // }
        bookOrder[0].push(currentOrder);

        const bookBid=await this._sortingBidOrders(ctx,bookOrder[0]);
        const bookAsk=await this._sortingAskOrders(ctx,bookOrder[1])
        bookOrder=[bookBid,bookAsk];
        await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(bookOrder)));
        // if (bondKeyAcumulator.length>0){
        console.log('There was match')
        const orderMatch={
            Orders: tokenAcumulator,
            Order: currentOrder,
        }
        let orderBuffer=Buffer.from(JSON.stringify(orderMatch));
        await ctx.stub.putState('OrderMatch'+genericID,orderBuffer);
        await ctx.SetEventName('BidMatched');
        await ctx.SetEventPayload(orderBuffer);
        // }
        return bookOrder
    }



    // This function will do a delivery versus payment when a Bid Order achieves a match
    // This function will be executed until no state according to that key exists in world state
    async MatchingBid(ctx,orderID){
        const orderBookBytes=await ctx.stub.getState('OrderBook');
        if (!orderBookBytes || orderBookBytes.length === 0){
            throw new Error(`Error, Order Book State does not exist`);
        }
        let orderBook=JSON.parse(orderBookBytes.toString());
        let asks=orderBook[1];
        let bids=orderBook[0];

        const orderMatchBytes= await ctx.stub.getState(orderID);
        if (!orderMatchBytes || orderMatchBytes.length === 0){
            throw new Error(`Error, Matching Order with ID ${orderID} does not exist`);
        }
        let orderMatch=JSON.parse(orderMatchBytes.toString());
        let order=orderMatch.Order;
        let orders=orderMatch.Orders[0];

        let bond=asks.filter(item => item.ID===orders.ID);
        let token=bids.filter(item=>item.ID===order.ID);

        let tokenID;
        let bondID;

        // delivery vs payment will change the IDs of both token and bond and will be included in order book
        [tokenID,bondID]=await this._dvp(ctx,bond[0].TokenID,token[0].TokenID, orders.QuantityMatch*order.Price,orders.QuantityMatch);

        let newCounter=order.QuantityMatch-orders.QuantityMatch;

        order.TokenID=tokenID;
        order.QuantityMatch=newCounter;

        let new_orders=orderMatch.Orders.filter(item => item.ID!==orders.ID);

        // lo que pasa con el documento de matching: si se han transferido todos, se elimina, en caso contrario solo
        // se elimina el order del ask
        // If we have transfered all tokens/bonds we can delete Order Match document from world state
        if (newCounter===0){
            await ctx.stub.deleteState(orderID)
        }else{
            let match={
                Orders: new_orders,
                Order: order,
            }
            await ctx.stub.putState(orderID, Buffer.from(JSON.stringify(match)));
        }

        // We have to modify order book because orders partially matched have changed their tokens ID

        // For Ask Orders
        let myAsk=await asks.filter(item=> item.ID===orders.ID);

        let index = asks.indexOf(myAsk[0]);
        myAsk[0].TokenID=bondID;
        myAsk[0].RestingQuantity=myAsk[0].RestingQuantity-orders.QuantityMatch;

        if (myAsk[0].RestingQuantity!==0){
            asks[index]=myAsk[0];
            orderBook=[bids,asks];
        }else if (myAsk[0].RestingQuantity===0){
            myAsk=await asks.filter(item=> item.ID!==orders.ID);
            orderBook=[bids,myAsk];
        }

        asks=orderBook[1];
        bids=orderBook[0];

        // For Bid Order
        let myBid=await bids.filter(item=> item.ID===order.ID);
        index = bids.indexOf(myBid[0]);
        myBid[0].TokenID=tokenID;
        myBid[0].RestingQuantity=myBid[0].RestingQuantity-orders.QuantityMatch;
        if (myBid[0].RestingQuantity!==0){
            bids[index]=myBid[0];
            orderBook=[bids,asks];
        }else if (myBid[0].RestingQuantity===0){
            myBid=await bids.filter(item=> item.ID!==order.ID);
            orderBook=[myBid,asks];
        }
        await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(orderBook)));
    }


    // This function will do a delivery versus payment when an Ask Order achieves a match
    // This function will be executed until no state according to that key exists in world state
    async MatchingAsk(ctx,orderID){
        const orderBookBytes=await ctx.stub.getState('OrderBook');
        if (!orderBookBytes || orderBookBytes.length === 0){
            throw new Error(`Error, Order Book State associated to key ${'OrderBook'} does not exist`);
        }
        let orderBook=JSON.parse(orderBookBytes.toString());

        let asks=orderBook[1];
        let bids=orderBook[0];

        // Retrieve order Match State
        const orderMatchBytes= await ctx.stub.getState(orderID);
        if (!orderMatchBytes || orderMatchBytes.length === 0){
            throw new Error(`Error, Matched Order State with ID ${orderID} does not exist`);
        }
        const orderMatch=JSON.parse(orderMatchBytes.toString());
        let order=orderMatch.Order;
        let orders=orderMatch.Orders[0];

        let bond=await asks.filter(item => item.ID===order.ID);
        let token=await bids.filter(item => item.ID===orders.ID);

        let tokenID;
        let bondID;

        // delivery vs payment
        [tokenID,bondID]=await this._dvp(ctx,bond[0].TokenID,token[0].TokenID, orders.QuantityMatch*orders.Price,orders.QuantityMatch);

        let newCounter=order.QuantityMatch-orders.QuantityMatch;

        order.TokenID=tokenID;
        order.QuantityMatch=newCounter;


        let new_orders=await orderMatch.Orders.filter(item => item.ID!==orders.ID);
        // If every Token/Bond have been transfered, we will delete Match Order State
        if (newCounter===0){
            await ctx.stub.deleteState(orderID)
        }else{
            const match={
                Orders: new_orders,
                Order: order,
            }
            await ctx.stub.putState(orderID, Buffer.from(JSON.stringify(match)))
        }

        let myBid=await bids.filter(item=> item.ID===orders.ID);
        let index = bids.indexOf(myBid[0]);
        myBid[0].TokenID=tokenID;
        myBid[0].RestingQuantity=myBid[0].RestingQuantity-orders.QuantityMatch;


        if (myBid[0].RestingQuantity!==0){
            bids[index]=myBid[0];
            orderBook=[bids,asks];
        }else if (myBid[0].RestingQuantity===0){
            myBid=await bids.filter(item=> item.ID!==orders.ID);
            orderBook=[myBid,asks];
        }

        asks=orderBook[1];
        bids=orderBook[0];

        let myAsk=await asks.filter(item=> item.ID===order.ID);
        index = asks.indexOf(myAsk[0]);
        myAsk[0].TokenID=bondID;
        myAsk[0].RestingQuantity=myAsk[0].RestingQuantity-orders.QuantityMatch;

        if (myAsk[0].RestingQuantity!==0){
            asks[index]=myAsk[0];
            orderBook=[bids,asks];
        }else if (myAsk[0].RestingQuantity===0){
            myAsk=await asks.filter(item=> item.ID!==order.ID);
            orderBook=[bids,myAsk];
        }

        await ctx.stub.putState('OrderBook', Buffer.from(JSON.stringify(orderBook)));

    }

    async _dvp(ctx,bondID,tokenID, tokensToTransfer, bondsToTransfer){
        console.log('Paso 1')
        const tokenBytes=await ctx.stub.getState(tokenID);
        if (!tokenBytes || tokenBytes.length === 0) {
            throw new Error(`Error, Token State with key ${tokenID} does not exist`);
        }
        console.log('Paso 2')
        const token=JSON.parse(tokenBytes.toString());

        const bondBytes=await ctx.stub.getState(bondID);
        if (!bondBytes || bondBytes.length === 0) {
            throw new Error(`Error, Bond State with ID ${bondID} does not exist`);
        }

        const bond=JSON.parse(bondBytes.toString());
        const genericID=await ctx.stub.getTxID();
        const key1=await ctx.stub.createCompositeKey('securitizationCoin',[bond.Owner,genericID]);
        const key2=await ctx.stub.createCompositeKey('securitizationCoin',[token.Owner,genericID]);
        const bondKey1=await ctx.stub.createCompositeKey('BondToken',[token.Owner,genericID]);
        const bondKey2=await ctx.stub.createCompositeKey('BondToken',[bond.Owner,genericID]);

        const balanceTokens=token.Amount-tokensToTransfer;

        let utxo1;
        let utxo2;
        let typeID;

        typeID=':1';
        utxo1={
            ID: key1+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: token.Owner,
            Issuer: token.Issuer,
            Amount: balanceTokens,
            CanBeUsed: false,
        };
        typeID=':0';
        utxo2={
            ID: key2+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: bond.Owner,
            Issuer: token.Issuer,
            Amount: tokensToTransfer,
            CanBeUsed: true
        };

        const balanceBonds=bond.Amount-bondsToTransfer;
        let bond1;
        let bond2;
        typeID=':1'
        // TODO:
        // Bond Arguments.
        bond1={
            ID: bondKey1+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: token.Owner,
            Issuer: token.Issuer,
            Amount: balanceBonds,
            CanBeUsed: false,
        };
        typeID=':0'
        bond2={
            ID: bondKey2+typeID,
            GenericID: genericID,
            TypeID: typeID,
            Owner: bond.Owner,
            Issuer: token.Issuer,
            Amount: bondsToTransfer,
            CanBeUsed: true
        };

        await ctx.stub.deleteState(tokenID);
        await ctx.stub.deleteState(bondID);

        console.log(balanceTokens)
        console.log(balanceBonds)

        if (balanceTokens!==0){
            console.log('balanceTokens!==0')
            await ctx.stub.putState(utxo2.ID,Buffer.from(JSON.stringify(utxo2)));
            await ctx.stub.putState(utxo1.ID,Buffer.from(JSON.stringify(utxo1)));
        }else{
            await ctx.stub.putState(utxo2.ID,Buffer.from(JSON.stringify(utxo2)));  
        }
        if (balanceBonds!==0){
            console.log('balanceBonds!==0')
            await ctx.stub.putState(bond1.ID,Buffer.from(JSON.stringify(bond1)));
            await ctx.stub.putState(bond2.ID,Buffer.from(JSON.stringify(bond2)));
        }else{
            await ctx.stub.putState(bond2.ID,Buffer.from(JSON.stringify(bond2)));
        }
        return [utxo1.ID, bond1.ID]
    }

    async QueryOrderBook(ctx){
        const bookOrderBytes=await ctx.stub.getState('OrderBook');
        if (!bookOrderBytes || bookOrderBytes.length === 0){
            throw new Error(`Order Book does not exist`);
        }
        const bookOrder=JSON.parse(bookOrderBytes.toString());
        return bookOrder
    }



    // // We must change this function
    // // Order book implementation URL http://web.archive.org/web/20110205154238/http://howtohft.blogspot.com/2011/02/how-to-build-fast-limit-order-book.html

}



// module.exports.originationContract=originationContract;
module.exports.securitizationContext=securitizationContext;
module.exports.servicingContract=servicingContract;
module.exports.ppaContract=ppaContract;
module.exports.commonSecuritizationContract=commonSecuritizationContract;
module.exports.bondIssuanceContract=bondIssuanceContract;
